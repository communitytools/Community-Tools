<?php

include_once('cmtls_map.features.inc');

define ('CMTLS_MAP_NONE', -1);
define ('CMTLS_MAP_VIEW_HIDDEN', 1);
define ('CMTLS_MAP_VIEW_HALF_PAGE', 2);
define ('CMTLS_MAP_VIEW_FULL_PAGE', 3);

function cmtls_map_cmtls_app_general_config($node_type, $node_config)
{
	//printr($node_config); exit;
	
	$config = module_invoke($node_type, 'cmtls_map_config');
	
	if(!empty($config))
	{
		$config = $config[$node_type];
		
		$form = array('cmtls_map' => array());
		
		$translations = array(
			CMTLS_MAP_NONE => t('No map'),
			CMTLS_MAP_VIEW_HIDDEN => t('Map is hidden'),
			CMTLS_MAP_VIEW_HALF_PAGE => t('Map is half page'),
			CMTLS_MAP_VIEW_FULL_PAGE => t('Map is full page'),
		);
		
		$map_default_state_options = array();
		
		foreach ($config['map views'] as $map_view)
		{
			$map_default_state_options[$map_view] = $translations[$map_view];
		}
		
		$form['cmtls_map'] = array(
			'#type' => 'fieldset',
			'#title' => t('Map settings'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		
		$form['cmtls_map']['map_default_state'] = array(
			'#type' => 'radios',
			'#title' => t('Default map state'),
			'#default_value' => (!empty($node_config['cmtls_map']['map_default_state']) ? $node_config['cmtls_map']['map_default_state'] : $config['default map view']),
			'#options' => $map_default_state_options,
		);
		
		if(isset($config['default map styles']))
		{
			$map_icon_options = array();
			
			foreach (cmtls_map_openlayers_styles() as $style)
			{
				if(!empty($style->cmtls_inline))
				{
					$map_icon_options[$style->name] = $style->title;
					
					if(isset($style->data['externalGraphic']))
					{
						$map_icon_options[$style->name] = '<img src="'.$style->cmtls_inline.'"> '.$style->title;
					}
				}
			}
			
			$form['cmtls_map']['map_icon'] = array(
				'#type' => 'radios',
				'#title' => t('Map icon'),
				'#default_value' => (!empty($node_config['cmtls_map']['map_icon']) ? $node_config['cmtls_map']['map_icon'] : $config['default map styles']['default']),
				'#options' => $map_icon_options,
			);
		}
		
		return $form;
	}
	else 
	{
		return NULL;
	}
}

function cmtls_map_get_icon($nid)
{
	static $icons;
	
	if(!isset($icons[$nid]))
	{
		$styles = cmtls_map_openlayers_styles();
		
		$config = cmtls_app_get_config($nid);
		
		if(isset($config['cmtls_map']['map_icon']) && isset($styles[$config['cmtls_map']['map_icon']]->data['externalGraphic']))
		{
			$icons[$nid] = '<img src="'.$styles[$config['cmtls_map']['map_icon']]->cmtls_inline.'">';
		}
		else 
		{
			$icons[$nid] = '<img src="'.$styles['cmtls-location-white']->cmtls_inline.'">';
		}
	}
	
	return $icons[$nid];
}

function hook_cmtls_map_config()
{
	return array(
		'example_module' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_FULL_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-white',
				'select' => 'cmtls-location-white-hover',
				'temporary' => 'cmtls-location-white',
			),
			'add from map' => FALSE,
			'is mappable' => FALSE,
		),
	);
}

function cmtls_map_default_styles()
{
	return array(
		'default' => 'cmtls-location-white',
		'select' => 'cmtls-location-white-hover',
		'temporary' => 'cmtls-location-white',
	);
}

/**
 * Implements hook_preprocess()
 * Adds current groups current app node to template variables
 *
 * @param unknown_type $vars
 * @param unknown_type $hook
 */
function cmtls_map_preprocess_page(&$vars)
{
	if(arg(1) != 'node')
	{
		$map_config = cmtls_map_get_config();
		
		if(!$map_config)
		{
			$current_group = _cmtls_group_get_current();
			$current_app = _cmtls_app_get_current($current_group);
			
			$map_config = module_invoke($current_app->field_cmtls_app_type[0]['value'], 'cmtls_map_config');
		}
		
		if($map_config)
		{
			$map_config = array_pop($map_config);
			
			if(!empty($map_config))
			{
				$app_map_config = cmtls_app_get_config($current_app);
				$app_map_config = $app_map_config['cmtls_map'];
				
				if(!isset($app_map_config['map_default_state']))
				{
					$app_map_config['map_default_state'] = $map_config['default map view'];
				}
				
				$map_config['default map view'] = $app_map_config['map_default_state'];
					
				if(isset($app_map_config['map_default_state']) && $app_map_config['map_default_state'] != CMTLS_MAP_NONE)
				{
					$map = cmtls_map_openlayers_presets();
					$map = openlayers_render_map($map['cmtls_map']->data, 'cmtls_map');
					
					// rewrite the $scripts
					$vars['scripts'] = drupal_get_js();
					
					// rewrite the $head
					$vars['head'] = drupal_set_html_head();
				}
				
				switch ($map_config['default map view'])
				{
					case CMTLS_MAP_VIEW_HIDDEN: $map_class = 'text-only'; break;
					case CMTLS_MAP_VIEW_FULL_PAGE: $map_class = 'map-only'; break;
					case CMTLS_MAP_VIEW_HALF_PAGE: $map_class = 'text-map'; break;
					default: $map_class = 'text-only'; break;
				}
				
				// map layers
				$features = _cmtls_map_features('get');
				
				$taxonomy_output = array();
				$apps_output = array();
				
				$layers_output = '<div id="cmtls-map-layer-switcher" class="hidden">';
				
				foreach ($features as &$feature)
				{
					if($feature->taxonomy) foreach ($feature->taxonomy as $tid => $tag) if(!$taxonomy_output[$feature->app_nid][$tid])
					{
						$taxonomy_output[$feature->app_nid][$tid] = '<li><label><input class="cmtls-layer-switch-tag" type="checkbox" data-tid="'.$tid.'" data-aid="'.$feature->app_nid.'" checked="checked"> '.check_plain($tag).'</label></li>';
					}
					
					if(!$apps_output[$feature->app_nid] && ($feature->app_type != 'cmtls_group' || $feature->app_type == 'cmtls_group' && arg(1) == 'list'))
					{
						$apps_output[$feature->app_nid] = '<label><input class="cmtls-layer-switch-app" type="checkbox" data-aid="'.$feature->app_nid.'" checked="checked"> '.$feature->app_title.'</label>';
					}
				}
				
				foreach ($apps_output as $aid => &$app_output)
				{
					$app_output = '<li>'.$app_output.($taxonomy_output[$aid] ? '<ul class="cmtls-map-taxonomy-layers">'.implode('', $taxonomy_output[$aid]).'</ul>' : NULL).'</li>';
				}
				
				$apps_output = '<ul class="cmtls-map-apps-layers">'.implode('', $apps_output).'</ul>';
				
				$layers_output .= $apps_output.'</div>';
				
				$vars['cmtls'] += $cache = array(
					'map' => array(
						'app_config' => $map_config,
						'class' => $map_class,
						'output' => $map,
						'layer_switcher' => $layers_output,
					),
				);
				
			}
		}
	}
}

function cmtls_map_set_config($config)
{
	$GLOBALS['conf']['cmtls']['map']['config'] = $config;
}

function cmtls_map_get_config()
{
	return isset($GLOBALS['conf']['cmtls']['map']['config']) ? $GLOBALS['conf']['cmtls']['map']['config'] : NULL;

}


/**
 * Implements hook_init()
 *
 */
function cmtls_map_init()
{
	drupal_add_js(drupal_get_path('module', 'cmtls_map') .'/js/cmtls_map.js');
	drupal_add_css(drupal_get_path('module', 'cmtls_map').'/css/cmtls_map.css', 'module', 'screen');
}

function cmtls_map_openlayers_styles()
{
	global $base_url;
	
	$styles = array();
	
	$module_path = drupal_get_path('module', 'cmtls_map');
	
	$markers = array(
		'cmtls-location-white' => array(
			'title' => t('White'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-white.png',
			'inline' => $base_url.'/'.$module_path.'/icons/location-white-inline.png',
		),
		'cmtls-location-white-hover' => array(
			'title' => t('White selected'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-white-hover.png',
		),
		'cmtls-location-red' => array(
			'title' => t('Red'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-red.png',
			'inline' => $base_url.'/'.$module_path.'/icons/location-red-inline.png',
		),
		'cmtls-location-red-hover' => array(
			'title' => t('Red selected'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-red-hover.png',
		),
		'cmtls-location-blue' => array(
			'title' => t('Blue'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-blue.png',
			'inline' => $base_url.'/'.$module_path.'/icons/location-blue-inline.png',
		),
		'cmtls-location-blue-hover' => array(
			'title' => t('Blue selected'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-blue-hover.png',
		),
		'cmtls-location-yellow' => array(
			'title' => t('Yellow'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-yellow.png',
			'inline' => $base_url.'/'.$module_path.'/icons/location-yellow-inline.png',
		),
		'cmtls-location-yellow-hover' => array(
			'title' => t('Yellow selected'),
			'marker' => $base_url.'/'.$module_path.'/icons/location-yellow-hover.png',
		),
	);
	
	foreach ($markers as $key => $marker)
	{
		$style = new stdClass();
		$style->cmtls_inline = (isset($marker['inline']) ? $marker['inline'] : NULL);
		$style->api_version = 1;
		$style->name = $key; 
		$style->title = $marker['title'];
		$style->description = t('Community Tools: map marker');
		$style->data = array(
			'fillOpacity' => 1,
			'externalGraphic' => $marker['marker'],
			'pointRadius' => 11.5,
			'cursor' => 'pointer',
		);
		$styles[$style->name] = $style;
		
	}
	
	return $styles;
}


function cmtls_map_openlayers_presets()
{
	$items = array();
	
	$layers = array(
		'osm_mapnik' => 'osm_mapnik',
		'google_satellite' => 'google_satellite',
		'google_hybrid' => 'google_hybrid',
		'google_normal' => 'google_normal',
		'google_physical' => 'google_physical',
		'cmtls_features' => 'cmtls_features',
 	);
	
	$layer_activated = array('cmtls_features' => 'cmtls_features');
	$layer_switcher = array('cmtls_features' => 'cmtls_features');
	
	//$features = _cmtls_map_features('get');
	
	$centerpoint = variable_get('cmtls_map_default_centerpoint', '24.734559058178, 59.424735894784');
	$zoom = variable_get('cmtls_map_default_zoom', '14');
	$default_layer = variable_get('cmtls_map_default_layer', 'osm_mapnik');
	$default_styles = $layer_styles = cmtls_map_default_styles();
	$restrict_extent = variable_get('cmtls_map_restrict_extent', NULL);
	
	$openlayers_presets = new stdClass;
	$openlayers_presets->disabled = FALSE; // Edit this to true to make a default openlayers_presets disabled initially
	$openlayers_presets->api_version = 1;
	$openlayers_presets->name = 'cmtls_map';
	$openlayers_presets->title = 'Community Tools: Map';
	$openlayers_presets->description = 'Community Tools: Map';
	$openlayers_presets->data = array(
		'width' => '300px',
		'height' => '300px',
		'image_path' => 'sites/all/libraries/openlayers/img/',
		'css_path' => 'sites/all/libraries/openlayers/theme/default/style.css',
		'proxy_host' => '',
		'hide_empty_map' => 0,
		'center' => array(
			'initial' => array(
			'centerpoint' => $centerpoint,
			'zoom' => $zoom,
			),
			'restrict' => array(
				'restrictextent' => ($restrict_extent ? 1 : 0),
				'restrictedExtent' => $restrict_extent, //'2744305.6715101,8264843.4899684,2765784.4764543,8285672.5801724',
			),
		),
		'behaviors' => array(
			//'openlayers_behavior_attribution' => array(),
			'cmtls_map_behavior_popup' => array(),
			/*
			'openlayers_behavior_layerswitcher' => array(
				'ascending' => 1,
			),
			*/
			'openlayers_behavior_panzoom' => array(),
			/*
			'openlayers_behavior_cluster' => array(
				'clusterlayer' => $layer_activated,
				'distance' => '20',
				'threshold' => '2',
			),
			*/
			'openlayers_behavior_navigation' => array(
				'zoomWheelEnabled' => FALSE, // doesn't work
			),
		),
		'default_layer' => $default_layer,
		'layers' => $layers,
		'layer_styles' => $layer_styles,
		'layer_activated' => $layer_activated,
		'layer_switcher' => $layer_switcher,
		'projection' => '900913',
		'displayProjection' => '4326',
		'styles' => $default_styles,
		'preset_name' => 'cmtls_map',
	);
	
	if(!$restrict_extent)
	{
		$openlayers_presets->data['behaviors']['openlayers_behavior_zoomtolayer'] = array(
			'zoomtolayer' => current($layer_activated),
			'point_zoom_level' => '14',
		);
	}
	
	//printr($openlayers_presets->data['center']); exit;
	
	global $user;
	
	$main_group = _cmtls_group_get_main();
	$current_group = _cmtls_group_get_current();
	
	$current_app = _cmtls_app_get_current($current_group);
	
	$current_config = module_invoke($current_app->field_cmtls_app_type[0]['value'], 'cmtls_map_config');
	if($current_config) $current_config = array_pop($current_config);
	
	if($current_config['add from map'] && cmtls_group_can_create_content($current_group, $user) || (!$user->uid && $current_group->field_cmtls_group_posting[0]['value'] == 1 && $current_group->nid == $main_group->nid))
	{
		$openlayers_presets->data['behaviors']['cmtls_map_behavior_add_object'] = array();
	}
	
	$items['cmtls_map'] = $openlayers_presets;
	
	// because the zoomtolayer does not work in node edit form, set the centerpoint and zoom manually
	if($_GET['lon'] && $_GET['lat'])
	{
		$centerpoint = (float)$_GET['lon'].', '.(float)$_GET['lat'];
		$zoom = 14;
	}
	elseif(sizeof($features))
	{
		if(sizeof($features) > 1)
		{
			foreach ($features as &$feat) if($feat->app_type != 'cmtls_group')
			{
				$centerfeature = $feat;
				break;
			}
		}
		else 
		{
			$centerfeature = array_pop($features);
		}
		
		$centerpoint = cmtls_map_parse_wkt($centerfeature->wkt);
		$centerpoint = $centerpoint['lon'].', '.$centerpoint['lat'];
		
		$zoom = 14;
	}
	
	// map for node edit window
	$openlayers_presets = new stdClass;
	$openlayers_presets->disabled = FALSE; // Edit this to true to make a default openlayers_presets disabled initially
	$openlayers_presets->api_version = 1;
	$openlayers_presets->name = 'cmtls_node_map';
	$openlayers_presets->title = 'Community Tools: Map (node edit)';
	$openlayers_presets->description = 'Community Tools: Map for node edit';
	$openlayers_presets->data = array(
		'hide_empty_map' => 0,
		'projection' => '900913',
		'width' => '300px',
		'height' => '300px',
		'image_path' => 'sites/all/libraries/openlayers/img/',
		'css_path' => 'sites/all/libraries/openlayers/theme/default/style.css',
		'default_layer' => $default_layer,
		'center' => array(
			'initial' => array(
				'centerpoint' => $centerpoint,
				'zoom' => $zoom,
			),
		),
		'displayProjection' => '4326',
		'behaviors' => array(
			'openlayers_behavior_panzoom' => array(),
		),
		'layers' => array(
			'osm_mapnik' => 'osm_mapnik',
			'google_satellite' => 'google_satellite',
			'google_hybrid' => 'google_hybrid',
			'google_normal' => 'google_normal',
			'google_physical' => 'google_physical',
		),
		'preset_name' => 'cmtls_node_map',
		'styles' => $default_styles,
	);
	
	$items['cmtls_node_map'] = $openlayers_presets;
	
	return $items;
}

function _cmtls_map_features($op = 'set', $feature = NULL)
{
	static $features;
	
	if($op == 'set')
	{
		$features[] = $feature;
	}
	
	if($op == 'get')
	{
		return (array)$features;
	}
}

function cmtls_map_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
	static $parents;
	
	if($op == 'load' && strpos($node->type, 'cmtls_') === 0)
	{
		$wkt = $node->field_cmtls_geoinfo[0]['openlayers_wkt'];
		
		if(!$wkt)
		{
			// try to load wkt
			$wkt = db_fetch_array(db_query('SELECT field_cmtls_geoinfo_openlayers_wkt FROM {content_field_cmtls_geoinfo} WHERE nid = %d', $node->nid));
			
			if(!$wkt['field_cmtls_geoinfo_openlayers_wkt'] || $wkt['field_cmtls_geoinfo_openlayers_wkt'] == 'GEOMETRYCOLLECTION()')
			{
				return;
			}
			else 
			{
				$wkt = $wkt['field_cmtls_geoinfo_openlayers_wkt'];
			}
		}
		else if($node->field_cmtls_geoinfo[0]['openlayers_wkt'] == 'GEOMETRYCOLLECTION()') 
		{
			return;
		}
		
		if(!$node->parent)
		{
			$node->parent = db_fetch_array(db_query('SELECT parent FROM {nodehierarchy} WHERE nid = %d', $node->nid));
			$node->parent = $node->parent['parent'];
			
			if($node->parent && !isset($parents[$node->parent]))
			{
				// load parent
				$parent = db_fetch_object(db_query('SELECT node.nid, type, title, parent, field_cmtls_app_type_value AS app_type, field_cmtls_app_config_value AS cmtls_app_config FROM {node} AS node LEFT JOIN {nodehierarchy} AS nodehierarchy ON node.nid = nodehierarchy.nid LEFT JOIN {content_type_cmtls_app} AS content_type_cmtls_app ON node.nid = content_type_cmtls_app.nid WHERE node.nid = %d', $node->nid));
				
				if(!$parent->parent)
				{
					$parent->app_type = $parent->type;
					$parent->title = t($parent->type);
				}
				
				while($parent->type != 'cmtls_app' && $parent->parent)
				{
					$i++;
					if($i > 100) exit;
					
					$parent = db_fetch_object(db_query('SELECT node.nid, type, title, parent, field_cmtls_app_type_value AS app_type, field_cmtls_app_config_value AS cmtls_app_config FROM {node} AS node LEFT JOIN {nodehierarchy} AS nodehierarchy ON node.nid = nodehierarchy.nid LEFT JOIN {content_type_cmtls_app} AS content_type_cmtls_app ON node.nid = content_type_cmtls_app.nid WHERE node.nid = %d', $parent->parent));
				}
				
				$config = unserialize($parent->cmtls_app_config);
				$parent->style = isset($config['cmtls_map']['map_icon']) ? $config['cmtls_map']['map_icon'] : NULL;
				
				$parents[$node->parent] = $parent;
			}
			
		}
		
		$taxonomy = taxonomy_node_get_terms($node);
		foreach ($taxonomy as &$tag)
		{
			$tag = $tag->name;
		}
		
		$feature = (object)array(
			'nid' => $node->nid,
			'title' => $node->title,
			'body' => strip_tags($node->body),
			'wkt' => $wkt,
			'taxonomy' => $taxonomy,
			'app_type' => $parents[$node->parent]->app_type ? $parents[$node->parent]->app_type : $node->type,
			'app_title' => $parents[$node->parent]->title ? $parents[$node->parent]->title : t('Groups'),
			'app_nid' => $parents[$node->parent]->nid,
			'style' => $parents[$node->parent]->style,
		);
		
		_cmtls_map_features('set', $feature);
	}
}


/**
 * Implementation of hook_openlayers_layers().
 */
function cmtls_map_openlayers_layers()
{
	$layers = array();

	$layer = new stdClass();
	$layer->api_version = 1;
	$layer->name = 'cmtls_features';
	$layer->title = 'cmtls_features';
	$layer->description = t('Features');
	$layer->data = array(
		'layer_type' => 'cmtls_map_vector',
		'projection' => array('4326'),
		'baselayer' => FALSE,
		'type' => 'Vector',
		'url' => array(),
		'options' => array(),
		'events' => array(),
	);
	
	$layers[$layer->name] = $layer;
	
	$features = _cmtls_map_features('get');
	
	if(sizeof($features)) foreach ($features as &$feature)
	{
		if($feature->app_type == 'cmtls_group' && arg(1) != 'list') continue;
		
		$layers[$layer->name]->data['features'][$feature->nid] = cmtls_map_format_feature($feature);
	}
	
	//printr($layers); exit;
	return $layers;
}

function cmtls_map_format_features($features)
{
	foreach ($features as $key => $feature)
	{
		if($feature->app_type == 'cmtls_group' && arg(1) != 'list')
		{
			unset($features[$key]);
			continue;
		}
		
		if($key != $feature->nid)
		{
			unset($features[$key]);
		}
		
		$features[$feature->nid] = cmtls_map_format_feature($feature);
	}
	
	return $features;
}

function cmtls_map_format_feature($feature)
{
	static $feature_styles;
	static $default_styles;
	static $styles;
	
	if(!$default_styles) $default_styles = cmtls_map_default_styles();
	if(!$styles) $styles = cmtls_map_openlayers_styles();
	
	$attributes = array(
		'id' => $feature->nid,
		'title' => $feature->title,
		'aid' => $feature->app_nid,
		'taxonomy' => $feature->taxonomy,
	);
	
	$content = module_invoke($feature->app_type, 'cmtls_map_popup_content', $feature);
	
	if($content)
	{
		$attributes['content'] = '<div id="cmtls-map-popup-content-'.$feature->nid.'" class="cmtls-map-popup-content hidden '.$feature->app_type.'">'.$content.'</div>';
	}
	
	if($feature_styles[$feature->style])
	{
		$feature->style = $feature_styles[$feature->style];
	}
	else 
	{
		$config = module_invoke($feature->app_type, 'cmtls_map_config');
		
		if($config && $config[$feature->app_type] && $config[$feature->app_type]['default map styles'])
		{
			if($feature->style)
			{
				$style = array(
					'default' => $feature->style,
					'select' => $feature->style.'-hover',
					'temporary' => $feature->style,
				);
			}
			else 
			{
				$style = array_merge($default_styles, $config[$feature->app_type]['default map styles']);
			}
			
			foreach($style as &$st)
			{
				$st = $styles[$st];
			}
			
			$feature->style = $feature_styles[$feature->style] = $style['default']->data;
		}
	}
	
	$feature->style['graphicTitle'] = $feature->title;
	
	$feature = array(
		'wkt' => $feature->wkt,
		'projection' => '4326',
		'attributes' => $attributes,
		'style' => $feature->style,
		'id' => $feature->nid,
	);
	
	return $feature;
}


/**
 * Implementation of hook_openlayers_layer_types()
 */
function cmtls_map_openlayers_layer_types()
{
	return array(
		'cmtls_map_vector' => array(
			'title' => t('cmtls_map'),
			'description' => t('Community Tools: Map vector layer type'),
			'layer_type' => array(
				'path' => drupal_get_path('module', 'cmtls_map'),
				'file' => 'cmtls_map.module',
				'class' => 'openlayers_layer_type_cmtls_map_vector',
				'parent' => 'openlayers_layer_type',
			),
		),
	);
}

/**
 * @file
 * OpenLayers Views Vector Layer Type
 */
class openlayers_layer_type_cmtls_map_vector extends openlayers_layer_type
{
	function options_init()
	{
		return array(
			'layer_type' => 'openlayers_layer_type_cmtls_map_vector',
			'layer_handler' => 'cmtls_map_vector',
			'vector' => TRUE,
		);
	}

	function options_form()
	{
		return array(
		);
	}

	function render(&$map)
	{
		drupal_add_js(drupal_get_path('module', 'cmtls_map') . '/js/cmtls_map_vector.js');
		
		return $this->options;
	}
}


/**
 * Implementation of hook_openlayers_behaviors().
 *
 */
function cmtls_map_openlayers_behaviors()
{
	return array(
		'cmtls_map_behavior_popup' => array(
			'title' => t('Pop Up'),
			'description' => t('Adds clickable info boxes to points or shapes on maps.'),
			'type' => 'layer',
			'path' => drupal_get_path('module', 'cmtls_map'),
			'file' => 'cmtls_map.module',
			'behavior' => array(
				'class' => 'cmtls_map_behavior_popup',
				'parent' => 'openlayers_behavior',
			),
		),
		'cmtls_map_behavior_add_object' => array(
			'title' => t('Add object'),
			'description' => t('Adds object.'),
			'type' => 'layer',
			'path' => drupal_get_path('module', 'cmtls_map'),
			'file' => 'cmtls_map.module',
			'behavior' => array(
				'class' => 'cmtls_map_behavior_add_object',
				'parent' => 'openlayers_behavior',
			),
		),
	);
}

/**
 *  Behavior
 */
class cmtls_map_behavior_popup extends openlayers_behavior
{
	/**
	* Provide initial values for options.
	*/
	function options_init()
	{
		return array(
			'layers' => array(),
		);
	}
	
	/**
	* Form defintion for per map customizations.
	*/
	function options_form($defaults)
	{
		return array();
	}
	
	/**
	* Render.
	*/
	function render(&$map)
	{
		drupal_add_js(drupal_get_path('module', 'cmtls_map') . '/js/cmtls_map_behavior_popup.js');
		return $this->options;
	}
}

/**
 *  Behavior
 */
class cmtls_map_behavior_add_object extends openlayers_behavior
{
	/**
	* Provide initial values for options.
	*/
	function options_init()
	{
		return array();
	}
	
	/**
	* Form defintion for per map customizations.
	*/
	function options_form($defaults)
	{
		return array();
	}
	
	/**
	* Render.
	*/
	function render(&$map)
	{
		return $this->options;
	}
}

function cmtls_map_parse_wkt($wkt)
{
	//"GEOMETRYCOLLECTION(POINT(24.738464355469 59.428708675493))";
	
	// strip GEOMETRYCOLLECTION()
	if(strpos($wkt, 'GEOMETRYCOLLECTION(') === 0)
	{
		$wkt = preg_replace('/^GEOMETRYCOLLECTION\(/', '', $wkt);
		$wkt = preg_replace('/\)$/', '', $wkt);
	}
	
	// point
	if(strpos($wkt, 'POINT(') === 0)
	{
		$wkt = preg_replace('/^POINT\(/', '', $wkt);
		$wkt = preg_replace('/\)$/', '', $wkt);
		
		$wkt = explode(' ', $wkt);
		$wkt = array(
			'lon' => $wkt[0],
			'lat' => $wkt[1],
		);
	}
	
	return $wkt;
}

function cmtls_map_menu()
{
	$items = array();
	
	$items['cmtls/%node/map/choose-app'] = array(
		'title' => t('What would you like to add?'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cmtls_map_choose_app_form', 1),
		'access callback' => 'node_access',
		'access arguments' => array('view', 1),
		'type' => MENU_CALLBACK,
	);
	
	$items['admin/build/cmtls/map'] = array(
		'title' => t('Map'),
		'description' => t('Map'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cmtls_map_config_form'),
		'access arguments' => array('administer cmtls'),
		'type' => MENU_LOCAL_TASK,
	);
	
	return $items;
}

function cmtls_map_config_form(&$form_state)
{
	$form = array();
	
	// Define Form
	$form['openlayers_layers_google_api'] = array(
		'#type' => 'textfield',
		'#title' => t('Google API Key'),
		'#default_value' => variable_get('openlayers_layers_google_api', ''),
		'#description' => t('<a href="@google">Obtain an API key from Google for your domain</a>', array('@google' => 'http://code.google.com/apis/maps/signup.html')),
	);
	
	$form['cmtls_map_default_layer'] = array(
		'#type' => 'textfield',
		'#title' => t('Default map layer'),
		'#description' => t('Default map layer machine name: osm_mapnik, google_satellite, google_hybrid, google_normal, google_physical'),
		'#default_value' => variable_get('cmtls_map_default_layer', 'osm_mapnik'),
	);
	
	$form['cmtls_map_default_centerpoint'] = array(
		'#type' => 'textfield',
		'#title' => t('Default map centerpoint'),
		'#description' => t('Geo coordinate: latitude, longitude. Example: 24.734559058178, 59.424735894784'),
		'#default_value' => variable_get('cmtls_map_default_centerpoint', '25.013607,58.595272'),
	);
	
	$form['cmtls_map_default_zoom'] = array(
		'#type' => 'textfield',
		'#title' => t('Default map zoom'),
		'#description' => t('The zoom state'),
		'#default_value' => variable_get('cmtls_map_default_zoom', '8'),
	);
	
	$form['cmtls_map_restrict_extent'] = array(
		'#type' => 'textfield',
		'#title' => t('Map extent'),
		'#description' => t('Restrict the map extent, example show only Tallinn: 2744305.6715101,8264843.4899684,2765784.4764543,8285672.5801724'),
		'#default_value' => variable_get('cmtls_map_restrict_extent', NULL),
	);
	
	// Make a system setting form and return
	return system_settings_form($form);
}

function cmtls_map_choose_app_form(&$form_state, $group)
{
	// Send the Modal Frame javascript for child windows to the page.
	modalframe_child_js();
	
	// get all groups apps
	$result = db_query('SELECT nodehierarchy.nid FROM {nodehierarchy} nodehierarchy WHERE nodehierarchy.parent = '.(int)$group->nid.' ORDER BY order_by');
	
	$apps = array();
	
	$apps = array();
	
	// app blocks
	while($row = db_fetch_array($result))
	{
		$app = node_load($row['nid']);
		
		$config = module_invoke($app->field_cmtls_app_type[0]['value'], 'cmtls_map_config');
		if($config)
		{
			$config = array_pop($config);
			
			if($config['is mappable'])
			{
				$apps[$app->nid] = $app->title;
			}
		}
	}
	
	$form['group_id'] = array(
		'#type' => 'value',
		'#value' => (int)$group->nid,
	);
	
	$form['wkt']['lat'] = array(
		'#type' => 'value',
		'#value' => (float)$_GET['lat'],
	);
	
	$form['wkt']['lon'] = array(
		'#type' => 'value',
		'#value' => (float)$_GET['lon'],
	);
	
	$form['app_id'] = array(
		'#type' => 'radios',
		'#title' => NULL,
		'#options' => $apps,
		'#required' => TRUE,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Choose'),
	);

	$form['#submit'] = array(
		'cmtls_map_choose_app_form_submit',
	);

	return $form;
}

/**
 * 
 *
 * @param array $form
 * @param array $form_state
 */
function cmtls_map_choose_app_form_submit($form, &$form_state)
{
	$app = node_load($form_state['values']['app_id']);
	
	$add_links = module_invoke($app->field_cmtls_app_type[0]['value'], 'cmtls_app_links');
	
	$form_state['redirect'] = url('cmtls/'.$form_state['values']['group_id'].'/'.$app->nid.'/'.$add_links[$app->field_cmtls_app_type[0]['value']]['add'], array('absolute' => TRUE)) . '?lat='.$form_state['values']['lat'].'&lon='.$form_state['values']['lon'];
}
