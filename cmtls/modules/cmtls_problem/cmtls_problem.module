<?php

include_once('cmtls_problem.features.inc');

/**
 * Implements hook_cmtls_context()
 *
 * The edit button for problems
 *
 * @return unknown
 */
function cmtls_problem_cmtls_context()
{
	return array(
		'cmtls_problem' => array(
			'cmtls_problem_edit' => array(
				'title' => t('Edit problem'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_problem').'/js/context_actions.js',
	);
}

function cmtls_problem_cmtls_dashboard_block_content($group, $app)
{
	return views_embed_view('cmtls_problems', 'block_2', $app->nid);
}

/**
 * Implements hook_init()
 *
 */
function cmtls_problem_init()
{
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	if($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_problem')
	{
		drupal_add_feed(url('cmtls/'.$current_group->nid.'/'.$current_app->nid.'/rss', array('absolute' => TRUE)), $app->title);
	}

	drupal_add_js(drupal_get_path('module', 'cmtls_problem') .'/js/app.js');
}

/**
 * Implementation of hook_cmtls_app()
 *
 * @return array
 */
function cmtls_problem_cmtls_app()
{
	return array(
		'cmtls_problem' => array(
			'title' => t('Problems'),
			'callback' => 'cmtls_problems_page',
			'node type title' => t('problem'),
		),
	);
}

/**
 * Implementation of hook_cmtls_map_config()
 *
 * @return array
 */
function cmtls_problem_cmtls_map_config()
{
	return array(
		'cmtls_problem' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-red',
				'select' => 'cmtls-location-red-hover',
				'temporary' => 'cmtls-location-red',
			),
			'add from map' => TRUE,
			'is mappable' => TRUE,
		),
	);
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_problem_menu()
{
	$items = array();

	$items['cmtls/%node/%node/problem/%node'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_problem_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/%node/edit'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_problem', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/%node/delete'] = array(
		'title' => 'Delete problem',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_problem'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_problem')),
		'type' => MENU_CALLBACK,
	);

	$items['admin/build/cmtls/problems'] = array(
		'title' => t('Problems'),
		'description' => t('Problems'),
		'page callback' => 'cmtls_problem_templates_page',
		'access arguments' => array('administer cmtls'),
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['admin/build/cmtls/problems/list'] = array(
		'title' => t('Answer templates'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -20,
	);

	$items['admin/build/cmtls/problems/add'] = array(
		'title' => t('Add'),
		'description' => t('Add problem answer template'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cmtls_problem_template_edit_form'),
		'access arguments' => array('administer cmtls'),
		'type' => MENU_LOCAL_TASK,
	);

	$items['admin/build/cmtls/problems/%/edit'] = array(
		'title' => t('Community Tools: Problem edit template'),
		'description' => 'Community Tools',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cmtls_problem_template_edit_form', 5),
		'access arguments' => array('administer cmtls'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function cmtls_problem_templates_page()
{
	$output = '';
	
	$templates = variable_get('cmtls_problem_answer_templates', array());
	
	if(sizeof($templates))
	{
		$templates = unserialize($templates);
		
		foreach ($templates as $key => &$template)
		{
			$template['edit_link'] = l(t('Edit'), 'admin/build/cmtls/problems/template/'.$key.'/edit');
		}
		
		$output = theme_table(array(t('Template name'), t('Template content'), NULL), $templates);
	}
	else 
	{
		$output = t('No answer templates defined');
	}
	
	return $output;
}

function cmtls_problem_template_add_form(&$form_state)
{
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Template name'),
		'#required' => TRUE,
	);
	
	$form['template'] = array(
		'#type' => 'textarea',
		'#title' => t('Template content'),
		'#required' => TRUE,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);

	$form['#submit'] = array(
		'cmtls_problem_template_save',
	);
	
	$form['#redirect'] = 'admin/build/cmtls/problems/templates/list';
	
	return $form;
}

/**
 * Creates, edits and deletes problem templates
 *
 * @param unknown_type $form_state
 * @param unknown_type $tid
 * @return unknown
 */
function cmtls_problem_template_edit_form(&$form_state, $tid = NULL)
{
	$templates = variable_get('cmtls_problem_answer_templates', array());
	
	if(sizeof($templates))
	{
		$templates = unserialize($templates);
	}
	
	if($tid)
	{
		if($templates[$tid])
		{
			// edit
			$form['#template'] = $template = $templates[$tid];
			$form['#tid'] = $tid;
		}
		else 
		{
			return FALSE;
		}
	}
	else 
	{
		// create
		$form['#template'] = array('title' => NULL, 'template' => NULL);
		$form['#tid'] = 0;
		$form['#redirect'] = 'admin/build/cmtls/problems/templates/list';
	}
	
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Template name'),
		'#required' => TRUE,
		'#default_value' => $template['title'],
	);
	
	$form['template'] = array(
		'#type' => 'textarea',
		'#title' => t('Template content'),
		'#required' => TRUE,
		'#default_value' => $template['template'],
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	
	// add delete
	if($tid)
	{
		$form['delete'] = array(
			'#type' => 'submit',
			'#value' => t('Delete'),
		);
	}

	$form['#submit'] = array(
		'cmtls_problem_template_save',
	);
		
	return $form;
}

/**
 * Saves or deletes problem template
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_problem_template_save($form, &$form_state)
{
	$templates = variable_get('cmtls_problem_answer_templates', array());
	
	if(sizeof($templates))
	{
		$templates = unserialize($templates);
	}
	
	if($form['#template'] && $form['#tid'])
	{
		if($templates[$form['#tid']])
		{
			// delete
			if($form_state['values']['op'] == t('Delete'))
			{
				unset($templates[$form['#tid']]);
				$form_state['redirect'] = 'admin/build/cmtls/problems/templates/list';
			}
			// edit
			else 
			{
				$templates[$form['#tid']] = array(
					'title' => $form_state['values']['title'],
					'template' => $form_state['values']['template'],
				);
			}
		}
	}
	else 
	{
		// add
		if(sizeof($templates))
		{
			$templates[] = array(
				'title' => $form_state['values']['title'],
				'template' => $form_state['values']['template'],
			);
		}
		// first must start at index 1, 0 is reserved for select dropdown
		else 
		{
			$templates[1] = array(
				'title' => $form_state['values']['title'],
				'template' => $form_state['values']['template'],
			);
		}
	}
	
	//printr($templates); exit;
	
	variable_set('cmtls_problem_answer_templates', serialize($templates));
}

function cmtls_problems_page($app_id)
{
	if($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_problems', 'default', $app_id));
	}

	//return theme('cmtls_pager');
	return theme('cmtls_problems_content', $app_id, theme('cmtls_pager'));
}

/**
 * problem node form page
 *
 * @param node $group
 * @param node $app
 * @param node $problem
 * @return unknown
 */
function cmtls_problem_page($group, $app, $problem)
{
	if($problem->type != 'cmtls_problem')
	{
		return t('This not a problem.');
	}

	return views_embed_view('cmtls_problems', 'default', $app->nid, $problem->nid);
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */

function cmtls_problem_form_cmtls_problem_node_form_alter(&$form, &$form_state)
{
	if(!_cmtls_is()) return;
	
	$form = cmtls_forms_alter($form, $form_state);
	
	$form['field_cmtls_problem_status'] = NULL;
	
	$form['body_field']['body']['#title'] = t('Description');
	
	$form['#after_build'][] = 'cmtls_problem_node_form_after_build';
	$form['#submit'][] = 'cmtls_problem_form_submit';
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */

function cmtls_problem_form_comment_form_alter(&$form, &$form_state)
{
	$node = node_load($form['nid']['#value']);

	if ($node->type == 'cmtls_problem')
	{
		if($GLOBALS['user'] && ($GLOBALS['user']->uid == 1 || in_array('admin', $GLOBALS['user']->roles)))
		{
			$templates = variable_get('cmtls_problem_answer_templates', array());
			
			if(sizeof($templates))
			{
				$templates = unserialize($templates);
				
				$template = array(
					'title' => t('Choose answer template'),
					'template' => '',
				);
				
				array_unshift($templates, $template);
				
				$vars = array(
					'cmtls' => array(
						'problems' => array(
							'templates' => $templates,
						),
					),
				);
				
				drupal_add_js($vars, 'setting');
				
				$options = array();
				
				foreach ($templates as &$template)
				{
					$options[] = $template['title'];
				}
				
				$form['answer_templates'] = array(
					'#type' => 'select',
					'#title' => t('Choose answer template'),
					'#options' => $options,
					'#attributes' => array(
						'id' => 'cmtls-problem-comment-template-'.$node->nid,
						'class' => 'cmtls-problem-comment-template-option',
					),
				);
			}
		}
		
		if ($node->field_cmtls_problem_status[0]['value'] == 0)
		{
			$form['problem_status_fixed'] = array(
				'#type' => 'checkbox',
				'#default_value' => 0,
				'#weight' => 19,
				'#title' => t('This problem has been fixed'),
			);
		}
		else
		{
			$form['problem_status_reported'] = array(
				'#type' => 'checkbox',
				'#default_value' => 0,
				'#weight' => 19,
				'#title' => t('This problem has not been fixed'),
			);
		}
		
		$form['#submit'] = array_merge(array('cmtls_problem_comment_submit'), $form['#submit']);
	}
}

/**
 * Clean up and defaults for problem node
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_problem_node_form_after_build($form, &$form_state)
{
	$form['field_cmtls_status_uid'] = NULL;
	
	foreach ($form['taxonomy'] as $t_id => $taxonomy) if ($taxonomy['#title']) {
		$form['taxonomy'][$t_id]['#title'] = t('Problem category');
	}

	return $form;
}

/**
 * Group node form submit, closes modalframe window
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_problem_form_submit($form, &$form_state)
{
	global $user;
	
	$form_state['values']['field_cmtls_status_uid'][0]['value'] = $user->uid;
	$form_state['values']['field_cmtls_problem_status'][0]['value'] = $form['#node']->nid ? $form['#node']->field_cmtls_problem_status[0]['value'] : 0;
}

function cmtls_problem_comment_submit($form, &$form_state)
{
	global $user;

	$node = node_load($form['nid']['#value']);
	if (($node->field_cmtls_problem_status[0]['value'] == 0 && $form_state['values']['problem_status_fixed'] == 1) ||
		($node->field_cmtls_problem_status[0]['value'] == 1 && $form_state['values']['problem_status_reported'] == 1))
	{
		$node->field_cmtls_status_uid[0]['value'] = $user->uid;
		if ($form_state['values']['problem_status_fixed'] == 1)
		{
			$node->field_cmtls_problem_status[0]['value'] = 1;
		}
		elseif ($form_state['values']['problem_status_reported'] == 1)
		{
			$node->field_cmtls_problem_status[0]['value'] = 0;
		}

		// Prepare node
		$node = node_submit($node);

		// Save Node
		node_save($node);

		// Update content if node exists, otherwise use content_insert()
		content_update($node);

		db_query("DELETE FROM {cache_content} WHERE cid = '%s'", 'content:' . $node->nid . ':' . $node->vid);
		
		$form_state['#cmtls_comment_options'] = array(
			'callback' => 'cmtlsProblemStatusUpdate',
			'nid' => $node->nid,
			'status' => $node->field_cmtls_problem_status[0]['value'],
			'status_label' => $node->field_cmtls_problem_status[0]['value'] ? t('Fixed') : t('New report'),
		);
	}
}

/**
 * Implements hook_theme()
 * Adds the problem view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_problem_theme($existing)
{
	return array(
		// problems page
		'cmtls_problems_content' => array (
			'arguments' => array('app_id' => NULL, 'pager' => NULL),
			'template' => 'cmtls-problems-content',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		// problems view
		'views_view__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-problems--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_unformatted__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-problems--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_fields__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-problems--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		// problems dashboard view
		'views_view__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-problems--block-2',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_unformatted__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-problems--block-2',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_fields__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-problems--block-2',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
	);
}

/**
 * Creates the path to problem view
 *
 * @param unknown_type $problem
 * @param unknown_type $group
 * @return unknown
 */
function cmtls_problem_path($problem, $group = NULL)
{
	if(!$group) $group = _cmtls_group_get_current();

	return 'cmtls/'.$group->nid.'/'.$problem->parent.'/problem/'.$problem->nid;
}

function cmtls_problem_cmtls_map_popup_content($feature)
{
	$node = node_load($feature->nid);
//	printr($node->field_cmtls_address[0]['value']); exit;


	$body = explode(' ', strip_tags(check_markup($node->body)));

	if(sizeof($body) > 25)
	{
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}

	$body = implode(' ', $body);

	$tax = check_plain(array_pop($node->taxonomy)->name);
	$address = check_plain($node->field_cmtls_address[0]['value']);

	$output = '<h1>'.l($node->title, cmtls_problem_path($node)).'</h1>';
	$output .= '<div class="address">';
	$output .= $tax;
	if ($tax && $address) $output .= ' &middot ';
	$output .= $address;
	$output .='</div>';
	$output .= '<div class="content">'.$body.'</div>';

	return $output;
}


/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_problem_cmtls_filter_info()
{
	return array(
		'cmtls_problem' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Latest posts'),
					'default values' => array(
						'sort' => 0,
					),
				),
				array(
					'title' => t('Not fixed'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_problem_status.field_cmtls_problem_status_value = 0',
						),
					), // where
				),
				array(
					'title' => t('Fixed'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_problem_status.field_cmtls_problem_status_value = 1',
						),
					), // where
				),
				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 2,
					),
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => TRUE,
				'date to' => TRUE,
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
				array(
					'field' => 'node_comment_statistics_comment_count',
					'direction' => 'DESC',
					'title' => t('Most commented'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
			),

		), // node type
	);
}

function cmtls_problem_cmtls_app_links($node = NULL)
{
	return array(
		'cmtls_problem' => array(
			'add' => 'problem/add',
			'delete' => 'problem/'.$node->nid.'/delete',
		),
	);
}

function cmtls_problem_cmtls_group_overview($app)
{
	$return = array(
		'total comments' => 0,
		'total posts' => 0,
		'posts column' => NULL,
		'comments column' => NULL,
	);	
	
	$group_id = array_pop($app->og_groups);
	
	$sql = 'SELECT SUM(node_comment_statistics.comment_count) AS comments FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d AND node_comment_statistics.comment_count > 0';
	$result = db_fetch_array(db_query($sql, $app->nid));
	$return['total comments'] = $result['comments'];
	
	$sql = "SELECT count(node.nid) AS posts FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid LEFT JOIN {content_type_cmtls_problem} AS content_type_cmtls_problem ON node.nid = content_type_cmtls_problem.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_problem' AND content_type_cmtls_problem.field_cmtls_problem_status_value = 0";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$new = $result['posts'];
	if (!$new) $new = NULL;
	
	$sql = "SELECT count(node.nid) AS posts FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid LEFT JOIN {content_type_cmtls_problem} AS content_type_cmtls_problem ON node.nid = content_type_cmtls_problem.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_problem' AND content_type_cmtls_problem.field_cmtls_problem_status_value = 1";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$fixed = $result['posts'];	
	if (!$fixed) $fixed = NULL;
	
	$return['total posts'] = $new + $fixed;
	
	if($new) $new = l(format_plural($new,'1 new','@count new'), 'cmtls/'.$group_id.'/'.$app->nid, array('query' => 'action=search&predefined_choice=1'));
	
	if($fixed && $new) $new .= ' &middot; ';

	if($fixed) $fixed = l(format_plural($fixed,'1 fixed','@count fixed'), 'cmtls/'.$group_id.'/'.$app->nid, array('query' => 'action=search&predefined_choice=2'));
	
	if($fixed || $new)
	{
		$return['posts column'] = $new.$fixed;
	}
	else 
	{
		$return['posts column'] = t('No problems posted');
	}
	
	$sql = "SELECT node_comment_statistics.nid, node_comment_statistics.last_comment_timestamp FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d ORDER BY node_comment_statistics.last_comment_timestamp DESC LIMIT 1";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$time_diff = time() - $result['last_comment_timestamp'];
	$last_commented = cmtls_format_date_ago($result['last_comment_timestamp']);
	
	$return['comments column'] = $return['total comments'] ? format_plural($return['total comments'],'1 comment','@count comments').' &middot; '.t('last').' '.$last_commented : NULL;
	
	return $return;
}