<?php

include_once('cmtls_problem.features.inc');

/**
 * Implements hook_cmtls_context()
 *
 * The edit button for problems
 *
 * @return unknown
 */
function cmtls_problem_cmtls_context()
{
	return array(
		'cmtls_problem' => array(
			'cmtls_problem_edit' => array(
				'title' => t('Edit problem'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_problem').'/js/context_actions.js',
	);
}

function cmtls_problem_cmtls_dashboard_block_content($group, $app)
{
	return views_embed_view('cmtls_problems', 'block_2', $app->nid);
}

/**
 * Implements hook_init()
 *
 */
function cmtls_problem_init()
{
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	if($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_problem')
	{
		drupal_add_feed(url('cmtls/'.$current_group->nid.'/'.$current_app->nid.'/rss', array('absolute' => TRUE)), $app->title);
	}

	//drupal_add_js(drupal_get_path('module', 'cmtls_problem') .'/js/app.js');
}

/**
 * Implementation of hook_cmtls_app()
 *
 * @return array
 */
function cmtls_problem_cmtls_app()
{
	return array(
		'cmtls_problem' => array(
			'title' => t('Problems'),
			'callback' => 'cmtls_problems_page',
		),
	);
}

/**
 * Implementation of hook_cmtls_map_config()
 *
 * @return array
 */
function cmtls_problem_cmtls_map_config()
{
	return array(
		'cmtls_problem' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-red',
				'select' => 'cmtls-location-red-hover',
				'temporary' => 'cmtls-location-red',
			),
		),
	);
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_problem_menu()
{
	$items = array();

	$items['cmtls/%node/%node/problem/%node'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_problem_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/%node/edit'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_problem', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/%node/delete'] = array(
		'title' => 'Delete problem',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_problem'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_problem')),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/problem/tag/%'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_problem_page_taxonomy',
		'page arguments' => array(1, 2, 5),
		'access callback' => 'node_access',
		'access arguments' => array('view', 2),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function cmtls_problems_page($app_id)
{
	if($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_problems', 'default', $app_id));
	}

	//return theme('cmtls_pager');
	return theme('cmtls_problems_content', $app_id, theme('cmtls_pager'));
}

/**
 * Problems filtered by taxonomy term/tag view
 *
 * @param node $group
 * @param node $app
 * @param string $taxonomy
 * @return string
 */
function cmtls_problem_page_taxonomy($group, $app, $taxonomy) {
	return views_embed_view('cmtls_problems', 'default', $app->nid, 'all', $taxonomy);
}

/**
 * problem node form page
 *
 * @param node $group
 * @param node $app
 * @param node $problem
 * @return unknown
 */
function cmtls_problem_page($group, $app, $problem)
{
	if($problem->type != 'cmtls_problem')
	{
		return t('This not a problem.');
	}

	return views_embed_view('cmtls_problems', 'default', $app->nid, $problem->nid);
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */

function cmtls_problem_form_alter(&$form, &$form_state, $form_id)
{
	//return;
	// prepare problem node form for cleanup
	if($form_id == 'cmtls_problem_node_form' && _cmtls_is())
	//if($form_id == 'cmtls_problem_node_form')
	{
		$form['name'] = $form['author']['name'];
		$form['name']['#type'] = 'value';
		$form['date'] = $form['author']['date'];
		$form['date']['#type'] = 'value';
		//$form['body'] = $form['body_field']['body'];

		$form['revision_information'] = NULL;
		$form['author'] = NULL;
		//$form['body_field'] = NULL;
		$form['options'] = NULL;
		$form['buttons']['preview'] = NULL;

		$group = _cmtls_group_get_current();
		$app = _cmtls_app_get_current($group);

		$form['field_cmtls_problem_status'] = NULL;

		if($form['buttons']['delete'])
		{
			$node = $form['#node'];

			$form['buttons']['delete']['#type'] = 'markup';
			$form['buttons']['delete']['#value'] = l(t('Delete'), 'cmtls/'.$group->nid.'/'.$app->nid.'/problem/'.$node->nid.'/delete', array('attributes' => array('class' => 'modalframe-processed')));
		}

		$form['#after_build'][] = 'cmtls_problem_node_form_after_build';
		$form['#submit'][] = 'cmtls_problem_form_submit';
	}

	if ($form_id == 'comment_form')
	{
		$node = node_load($form['nid']['#value']);

		if ($node->type == 'cmtls_problem') {
			if ($node->field_cmtls_problem_status[0]['value'] == 0)
			{
				$form['problem_status_fixed'] = array(
					'#type' => 'checkbox',
					'#default_value' => 0,
					'#title' => t('This problem has been fixed'),
				);
			}
			else
			{
				$form['problem_status_reported'] = array(
					'#type' => 'checkbox',
					'#default_value' => 0,
					'#title' => t('This problem has not been fixed'),
				);
			}

			$form['#submit'] = array_merge(array('cmtls_problem_comment_submit'), $form['#submit']);
		}
	}
}

/**
 * Clean up and defaults for problem node
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_problem_node_form_after_build($form, &$form_state)
{
	//printr($form); exit;

	$node = $form['#node'];

	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	cmtls_group_set_og_form_values($form, $form_state);

	$form['comment'] = $form['comment_settings']['comment'];
	$form['comment']['#type'] = 'value';

	$form['parent'] = $form['hierarchy']['parent'];
	$form['parent']['#type'] = 'value';
	$form['parent']['#value'] = $form_state['values']['parent'] = $node->parent ? $node->parent : $current_app->nid;

	$form['hierarchy'] = NULL;
	$form['sections'] = NULL;
	$form['attachments'] = NULL;
	$form['comment_settings'] = NULL;
	$form['menu'] = NULL;
	$form['path'] = NULL;

	$form['field_cmtls_geoinfo']['#prefix'] = '<div class="ol-map-input-widget">';
	$form['field_cmtls_geoinfo']['#suffix'] = '</div>';

	$form['field_cmtls_status_uid'] = NULL;
	return $form;
}

/**
 * Group node form submit, closes modalframe window
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_problem_form_submit($form, &$form_state)
{
	global $user;
	$form_state['values']['field_cmtls_status_uid'][0]['value'] = $user->uid;
	$form_state['values']['field_cmtls_problem_status'][0]['value'] = 0;

	// Tell the parent window to close the modal frame dialog.
	modalframe_close_dialog(array(
		'refresh' => TRUE,
	));
}

function cmtls_problem_comment_submit($form, &$form_state)
{
	global $user;

	$node = node_load($form['nid']['#value']);
	if (($node->field_cmtls_problem_status[0]['value'] == 0 && $form_state['values']['problem_status_fixed'] == 1) ||
		($node->field_cmtls_problem_status[0]['value'] == 1 && $form_state['values']['problem_status_reported'] == 1))
	{
		$node->field_cmtls_status_uid[0]['value'] = $user->uid;
		if ($form_state['values']['problem_status_fixed'] == 1)
		{
			$node->field_cmtls_problem_status[0]['value'] = 1;
		}
		elseif ($form_state['values']['problem_status_reported'] == 1)
		{
			$node->field_cmtls_problem_status[0]['value'] = 0;
		}

		// Prepare node
		$node = node_submit($node);

		// Save Node
		node_save($node);

		// Update content if node exists, otherwise use content_insert()
		content_update($node);

		db_query("DELETE FROM {cache_content} WHERE cid = '%s'", 'content:' . $node->nid . ':' . $node->vid);
	}
}

/**
 * Implements hook_theme()
 * Adds the problem view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_problem_theme($existing)
{
	return array(
		// problems page
		'cmtls_problems_content' => array (
			'arguments' => array('app_id' => NULL, 'pager' => NULL),
			'template' => 'cmtls-problems-content',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		// problems view
		'views_view__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-problems--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_unformatted__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-problems--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_fields__cmtls_problems__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-problems--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		// problems dashboard view
		'views_view__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-problems--block-2',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_unformatted__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-problems--block-2',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
		'views_view_fields__cmtls_problems__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-problems--block-2',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_problem').'/theme',
		),
	);
}

/**
 * Creates the path to problem view
 *
 * @param unknown_type $problem
 * @param unknown_type $group
 * @return unknown
 */
function cmtls_problem_path($problem, $group = NULL)
{
	if(!$group) $group = _cmtls_group_get_current();

	return 'cmtls/'.$group->nid.'/'.$problem->parent.'/problem/'.$problem->nid;
}

function cmtls_problem_cmtls_map_popup_content($feature)
{
	$node = node_load($feature->nid);
//	printr($node->field_cmtls_address[0]['value']); exit;


	$body = explode(' ', strip_tags(check_markup($node->body)));

	if(sizeof($body) > 25)
	{
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}

	$body = implode(' ', $body);

	$output = '<h1><a href="'.base_path().cmtls_problem_path($node).'">'.$node->title.'</a></h1>';
	$output .= '<div class="address">'.$node->field_cmtls_address[0]['value'].'</div>';
	$output .= '<div class="content">'.$body.'</div>';

	return $output;
}


/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_problem_cmtls_filter_info()
{
	return array(
		'cmtls_problem' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Latest posts'),
					'default values' => array(
						'sort' => 0,
					),
				),
				array(
					'title' => t('Not fixed'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_problem_status.field_cmtls_problem_status_value = 0',
						),
					), // where
				),
				array(
					'title' => t('Fixed'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_problem_status.field_cmtls_problem_status_value = 1',
						),
					), // where
				),
				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 2,
					),
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => TRUE,
				'date to' => TRUE,
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
				array(
					'field' => 'node_comment_statistics_comment_count',
					'direction' => 'DESC',
					'title' => t('Most commented'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
			),

		), // node type
	);
}
