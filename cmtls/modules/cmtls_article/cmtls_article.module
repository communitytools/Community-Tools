<?php

include_once('cmtls_article.features.inc');

/**
 * Implements hook_cmtls_context()
 * 
 * The edit button for articles
 *
 * @return unknown
 */
function cmtls_article_cmtls_context()
{
	return array(
		'cmtls_article' => array(
			'cmtls_article_edit' => array(
				'title' => t('Edit article'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_article').'/js/context_actions.js',
	);
}

function cmtls_article_cmtls_dashboard_block_content($group, $app)
{
	return views_embed_view('cmtls_articles', 'block_2', $app->nid);
}

/**
 * Implements hook_init()
 * 
 */
function cmtls_article_init()
{
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);
	
	if($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_article')
	{
		drupal_add_feed(url('cmtls/'.$current_group->nid.'/'.$current_app->nid.'/rss', array('absolute' => TRUE)), $app->title);
	}
	
	//drupal_add_js(drupal_get_path('module', 'cmtls_article') .'/js/app.js');
}

function cmtls_article_cmtls_app()
{
	return array(
		'cmtls_article' => array(
			'title' => t('Articles'),
			'callback' => 'cmtls_articles_page',
		),
	);
}

function cmtls_article_cmtls_map_config()
{
	return array(
		'cmtls_article' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-white',
				'select' => 'cmtls-location-white-hover',
				'temporary' => 'cmtls-location-white',
			),
		),
	);
}

function cmtls_article_cmtls_app_config_defaults()
{
	return array(
		'sorting_field' => 'node_created',
		'sorting_dir' => 'DESC'
	);
}

function cmtls_article_cmtls_app_config($config)
{
	$settings = array_merge(cmtls_article_cmtls_app_config_defaults(), (array)$config['cmtls_article']);
	
	//printr($settings);
	
	$form['cmtls_article']['sorting_field'] = array(
		'#type' => 'radios',
		'#title' => t('Sorting field'),
		'#default_value' => $settings['sorting_field'],
		'#options' => array(
			'node_created' => t('Created date'),
			'node_title' => t('Article title'),
		),
	);
	
	$form['cmtls_article']['sorting_dir'] = array(
		'#type' => 'radios',
		'#title' => t('Sorting order'),
		'#default_value' => $settings['sorting_dir'],
		'#options' => array(
			'ASC' => t('Ascending'),
			'DESC' => t('Descending'),
		),
	);
	
	return $form;
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_article_menu()
{
	$items = array();
	
	$items['cmtls/%node/%node/article/%node'] = array(
		'title' => 'Article',
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_article_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);
	
	$items['cmtls/%node/%node/article/%node/edit'] = array(
		'title' => 'Article',
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_article', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);
	
	$items['cmtls/%node/%node/article/%node/delete'] = array(
		'title' => 'Delete article',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);
	
	$items['cmtls/%node/%node/article/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_article'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_article')),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/article/tag/%'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_article_page_taxonomy',
		'page arguments' => array(1, 2, 5),
		'access callback' => 'node_access',
		'access arguments' => array('view', 2),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

function cmtls_articles_page($app_id)
{
	if($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_articles', 'default', $app_id));
	}
	
	return theme('cmtls_articles_content', $app_id, theme('cmtls_pager'));
}

/**
 * article node form page
 *
 * @param node $group
 * @param node $app
 * @param node $article
 * @return unknown
 */
function cmtls_article_page($group, $app, $article)
{
	if($article->type != 'cmtls_article')
	{
		return t('This not a article.');
	}
	
	return views_embed_view('cmtls_articles', 'default', $app->nid, $article->nid).cmtls_map_page();
}

/**
 * articles filtered by taxonomy term/tag view
 *
 * @param node $group
 * @param node $app
 * @param string $taxonomy
 * @return string
 */
function cmtls_article_page_taxonomy($group, $app, $taxonomy) {
	return views_embed_view('cmtls_articles', 'default', $app->nid, 'all', $taxonomy) . cmtls_map_page();
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */

function cmtls_article_form_alter(&$form, &$form_state, $form_id)
{
	//return;
	// prepare article node form for cleanup
	if($form_id == 'cmtls_article_node_form' && _cmtls_is())
	//if($form_id == 'cmtls_article_node_form')
	{
		$form['name'] = $form['author']['name'];
		$form['name']['#type'] = 'value';
		$form['date'] = $form['author']['date'];
		$form['date']['#type'] = 'value';
		//$form['body'] = $form['body_field']['body'];
		
		$form['revision_information'] = NULL;
		$form['author'] = NULL;
		//$form['body_field'] = NULL;
		$form['options'] = NULL;
		$form['buttons']['preview'] = NULL;
		
		$group = _cmtls_group_get_current();
		$app = _cmtls_app_get_current($group);
		
		if($form['buttons']['delete'])
		{
			$node = $form['#node'];
			
			$form['buttons']['delete']['#type'] = 'markup';
			$form['buttons']['delete']['#value'] = l(t('Delete'), 'cmtls/'.$group->nid.'/'.$app->nid.'/article/'.$node->nid.'/delete', array('attributes' => array('class' => 'modalframe-processed')));
		}
		
		$form['#after_build'][] = 'cmtls_article_node_form_after_build';
		$form['#submit'][] = 'cmtls_article_form_submit';
	}
	
	//printr($form);
}

/**
 * Clean up and defaults for article node
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_article_node_form_after_build($form, &$form_state)
{
	//printr($form); exit;
	
	$node = $form['#node'];
	
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);
	
	cmtls_group_set_og_form_values($form, $form_state);
	
	$form['comment'] = $form['comment_settings']['comment'];
	$form['comment']['#type'] = 'value';
	
	$form['parent'] = $form['hierarchy']['parent'];
	$form['parent']['#type'] = 'value';
	$form['parent']['#value'] = $form_state['values']['parent'] = $node->parent ? $node->parent : $current_app->nid;
	
	$form['hierarchy'] = NULL;
	$form['sections'] = NULL;
	$form['attachments'] = NULL;
	$form['comment_settings'] = NULL;
	$form['menu'] = NULL;
	$form['path'] = NULL;
	
	$form['field_cmtls_geoinfo']['#prefix'] = '<div class="ol-map-input-widget">';
	$form['field_cmtls_geoinfo']['#suffix'] = '</div>';
	
	return $form;
}

/**
 * Group node form submit, closes modalframe window
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_article_form_submit($form, &$form_state)
{
	// Tell the parent window to close the modal frame dialog.
	modalframe_close_dialog(array(
		'refresh' => TRUE,
	));
}

/**
 * Implements hook_theme()
 * Adds the article view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_article_theme($existing)
{
	return array(
		// articles page
		'cmtls_articles_content' => array (
			'arguments' => array('app_id' => NULL, 'pager' => NULL),
			'template' => 'cmtls-articles-content',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		// articles view
		'views_view__cmtls_articles__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-articles--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		'views_view_unformatted__cmtls_articles__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-articles--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		'views_view_fields__cmtls_articles__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-articles--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		// articles dashboard view
		'views_view__cmtls_articles__block_2' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-articles--block-2',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		'views_view_unformatted__cmtls_articles__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-articles--block-2',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
		'views_view_fields__cmtls_articles__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-articles--block-2',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_article').'/theme',
		),
	);
}

/**
 * Creates the path to article view
 *
 * @param unknown_type $article
 * @param unknown_type $group
 * @return unknown
 */
function cmtls_article_path($article, $group = NULL)
{
	if(!$group) $group = _cmtls_group_get_current();
	
	return 'cmtls/'.$group->nid.'/'.$article->parent.'/article/'.$article->nid;
}

function cmtls_article_cmtls_map_popup_content($feature)
{
	$node = node_load($feature->nid);
	
	$body = explode(' ', strip_tags(check_markup($node->body)));
	
	if(sizeof($body) > 25)
	{
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}
	
	$body = implode(' ', $body);
	
	$output = '<h1><a href="'.base_path().cmtls_article_path($node).'">'.check_plain($node->title).'</a></h1>';
	$output .= '<div class="content">'.$body.'</div>';
	
	return $output;
}

function cmtls_article_views_query_alter(&$view, &$query)
{
	if($view->name == 'cmtls_articles')
	{
		$config = (array)cmtls_app_get_config(node_load($view->args[0]));
		$config = $config['cmtls_article'];
		
		$settings = array_merge(cmtls_article_cmtls_app_config_defaults(), (array)$config);
		
		unset($query->orderby);
		$query->orderby = array($settings['sorting_field'].' '.$settings['sorting_dir']);
	}
}

/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_article_cmtls_filter_info()
{
	return array(
		'cmtls_article' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Latest posts'),
					'default values' => array(
						'sort' => 0,
						'date from' => '-7 days',
						'date to' => 'now',
						'search' => '',
					),
					'where' => array(
						'clauses' => array(),
						'args' => array(),
					), // where
				),

				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 0,
						'date from' => '-7 days',
						'date to' => 'now',
						'search' => '',
					),
					'where' => array(
						'clauses' => array(),
						'args' => array(),
					), // where
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => TRUE,
				'date to' => TRUE,
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
				'date from' => '-7 days',
				'date to' => 'now',
			),

		), // node type
	);
}
