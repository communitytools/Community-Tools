<?php

include_once('cmtls_idea.features.inc');

/**
 * Implements hook_cmtls_context()
 *
 * The edit button for ideas
 *
 * @return unknown
 */
function cmtls_idea_cmtls_context()
{
	return array(
		'cmtls_idea' => array(
			'cmtls_idea_edit' => array(
				'title' => t('Edit idea'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_idea') . '/js/context_actions.js',
	);
}

function cmtls_idea_cmtls_dashboard_block_content($group, $app)
{
	return views_embed_view('cmtls_ideas', 'block_2', $app->nid);
}

/**
 * Implements hook_init()
 *
 */
function cmtls_idea_init()
{
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	if($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_idea')
	{
		drupal_add_feed(url('cmtls/' . $current_group->nid . '/' . $current_app->nid . '/rss', array('absolute' => TRUE)), $app->title);
	}

	//drupal_add_js(drupal_get_path('module', 'cmtls_idea') . '/js/app.js');
}

/**
 * Implementation of hook_cmtls_app()
 *
 * @return array
 */
function cmtls_idea_cmtls_app()
{
	return array(
		'cmtls_idea' => array(
			'title' => t('Ideas'),
			'callback' => 'cmtls_ideas_page',
			'node type title' => t('idea'),
		),
	);
}

/**
 * Implementation of hook_cmtls_map_config()
 *
 * @return array
 */
function cmtls_idea_cmtls_map_config()
{
	return array(
		'cmtls_idea' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-yellow',
				'select' => 'cmtls-location-yellow-hover',
				'temporary' => 'cmtls-location-yellow',
			),
			'add from map' => TRUE,
			'is mappable' => TRUE,
		),
	);
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_idea_menu()
{
	$items = array();

	$items['cmtls/%node/%node/idea/%node'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_idea_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/idea/%node/edit'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_idea', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/idea/%node/delete'] = array(
		'title' => 'Delete idea',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/idea/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_idea'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_idea')),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/idea/tag/%'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_idea_page_taxonomy',
		'page arguments' => array(1, 2, 5),
		'access callback' => 'node_access',
		'access arguments' => array('view', 2),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function cmtls_ideas_page($app_id)
{
	if($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_ideas', 'default', $app_id));
	}

	return theme('cmtls_ideas_content', $app_id);
}

/**
 * ideas filtered by taxonomy term/tag view
 *
 * @param node $group
 * @param node $app
 * @param string $taxonomy
 * @return string
 */
function cmtls_idea_page_taxonomy($group, $app, $taxonomy) {
	return views_embed_view('cmtls_ideas', 'default', $app->nid, 'all', $taxonomy);
}

/**
 * idea node form page
 *
 * @param node $group
 * @param node $app
 * @param node $idea
 * @return unknown
 */
function cmtls_idea_page($group, $app, $idea)
{
	if($idea->type != 'cmtls_idea')
	{
		return t('This not a idea.');
	}

	return views_embed_view('cmtls_ideas', 'default', $app->nid, $idea->nid);
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */

function cmtls_idea_form_cmtls_idea_node_form_alter(&$form, &$form_state)
{
	if(!_cmtls_is()) return;

	global $user;

	$form = cmtls_forms_alter($form, $form_state);

	if(!$form['#node']->nid && $user->euid && variable_get('fb_app_id', NULL) && cmtls_auth_authentication_module() == 'cmtls_fb')
	{
		$form['fb_post_wall'] = array(
			'#type' => 'checkbox',
			'#title' => t('Post this idea also on my Facebook wall'),
			'#description' => NULL,
			'#default_value' => 0,
		);

		// Create container for Facebook's JSDK
		$form['fb_jsdk_container'] = array(
			'#type' => 'markup',
			'#value' => '<div id="fb-root"></div>',
			'#weight' => 500, // Sink the element
		);

		$submit = array_search('cmtls_forms_submit', $form['#submit']);
		$form['#submit'][$submit] = 'cmtls_idea_add_to_fb_wall';

		$form['buttons']['submit']['#submit'][] = 'cmtls_idea_prevent_redirect';
	}
}

/**
 *
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_idea_prevent_redirect($form, &$form_state)
{
	if($form_state['values']['fb_post_wall'] && $fb_app_id = variable_get('fb_app_id', ''))
	{
		$form_state['redirect'] = FALSE;
	}
	else
	{
		// Tell the parent window to close the modal frame dialog.
		modalframe_close_dialog(array(
			'refresh' => TRUE,
		));
	}
}

/**
 *
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_idea_add_to_fb_wall($form, &$form_state)
{
	if($form_state['values']['fb_post_wall'] && $fb_app_id = variable_get('fb_app_id', ''))
	{
		$form_state['redirect'] = FALSE;
		$_SESSION['cmtls_idea_fb_publish'] = TRUE;
	}
	else
	{
		// Tell the parent window to close the modal frame dialog.
		modalframe_close_dialog(array(
			'refresh' => TRUE,
		));
	}
}

/**
 * Implents hook_nodeapi()
 *
 * @param node $node
 * @param string $op
 * @param unknown_type $a3
 * @param unknown_type $a4
 * @return array
 */
function cmtls_idea_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
	global $user;

	if($op == 'insert' && $user->uid && $node->type == 'cmtls_idea' && $_SESSION['cmtls_idea_fb_publish'])
	{
		unset($_SESSION['cmtls_idea_fb_publish']);

		$fb_app_id = variable_get('fb_app_id', NULL);

		if(!$fb_app_id) return;

		// add facebook stream to wall
		global $base_url;
		$site = variable_get('site_name', $base_url);

		$attachment = array(
			'name'        => strip_tags($node->title),
			'href'        => url(cmtls_path_to_node($node), array('absolute' => TRUE)),
			'caption'     => t("{*actor*} created a new post !site", array("!site" => $site)),
		);
		$action_links = array(
			array(
				'text'  => $site,
				'href'  => $base_url,
			),
		);
		$message = strip_tags($node->body);
		$method = 'stream.publish';
		$user_message_prompt = t('Share your idea');
		$streamPublishArgs = compact('method', 'message', 'attachment', 'action_links', 'user_message_prompt');

		drupal_add_js(array('cmtls' => array('Facebook' => array('appId' => $fb_app_id, ))), 'setting');
		drupal_add_js(array('cmtls' => array('Facebook' => array('streamPublish' => $streamPublishArgs, ))), 'setting');
		drupal_add_js(drupal_get_path('module', 'cmtls_idea').'/js/fb_publish.js');
	}
}


/**
 * Implements hook_theme()
 * Adds the idea view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_idea_theme($existing)
{
	return array(
		// ideas page
		'cmtls_ideas_content' => array (
			'arguments' => array('app_id' => NULL),
			'template' => 'cmtls-ideas-content',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		// ideas view
		'views_view__cmtls_ideas__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-ideas--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		'views_view_unformatted__cmtls_ideas__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-ideas--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		'views_view_fields__cmtls_ideas__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-ideas--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		// ideas dashboard view
		'views_view__cmtls_ideas__block_2' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-ideas--block-2',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		'views_view_unformatted__cmtls_ideas__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-ideas--block-2',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
		'views_view_fields__cmtls_ideas__block_2' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-ideas--block-2',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_idea') . '/theme',
		),
	);
}

/**
 * Creates the path to idea view
 *
 * @param unknown_type $idea
 * @param unknown_type $group
 * @return unknown
 */
function cmtls_idea_path($idea, $group = NULL)
{
	if(!$group) $group = _cmtls_group_get_current();

	return 'cmtls/' . $group->nid . '/' . $idea->parent . '/idea/' . $idea->nid;
}

function cmtls_idea_cmtls_map_popup_content($feature)
{
	$node = node_load($feature->nid);


	$body = explode(' ', strip_tags(check_markup($node->body)));

	if(sizeof($body) > 25)
	{
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}

	$body = implode(' ', $body);

	$output = '<h1>'.l($node->title, cmtls_idea_path($node)).'</h1>';
	$output .= '<div class="address">'.check_plain($node->field_cmtls_address[0]['value']).'</div>';
	$output .= '<div class="content">'.$body.'</div>';

	return $output;
}

/**
 * Implements hook_cmtls_stance_info()
 *
 */
function cmtls_idea_cmtls_stance_info()
{
	return array(
		'cmtls_idea' => array(
			'stance choices' => array(
				1 => t('For'),
				2 => t('Against'),
				0 => t('Abstain'),
			),
			'default stance choice' => 0,
			'visible stance choices' => array(1, 2),
			'stance form title' => t('Answer'),
		),
	);
}

/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_idea_cmtls_filter_info()
{
	return array(
		'cmtls_idea' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Latest posts'),
					'default values' => array(
						'sort' => 0,
					),
				),
				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 2,
					),
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => TRUE,
				'date to' => TRUE,
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
				array(
					'field' => 'node_comment_statistics_comment_count',
					'direction' => 'DESC',
					'title' => t('Most commented'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
			),

		), // node type
	);
}

function cmtls_idea_cmtls_app_links($node = NULL)
{
	return array(
		'cmtls_idea' => array(
			'add' => 'idea/add',
			'delete' => 'idea/'.$node->nid.'/delete',
		),
	);
}

function cmtls_idea_cmtls_group_overview($app)
{
	$return = array(
		'total comments' => 0,
		'total posts' => 0,
		'posts column' => NULL,
		'comments column' => NULL,
	);

	$group_id = array_pop($app->og_groups);

	$sql = 'SELECT SUM(node_comment_statistics.comment_count) AS comments FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d AND node_comment_statistics.comment_count > 0';
	$result = db_fetch_array(db_query($sql, $app->nid));
	$return['total comments'] = $result['comments'];

	$sql = "SELECT count(node.nid) AS posts FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_idea'";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$return['total posts'] = $result['posts'];

	$sql = "SELECT node.created FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_idea' ORDER BY node.nid DESC LIMIT 1";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$time_diff = time() - $result['created'];
	$last_posted = t(($time_diff < 0 ? '%time hence' : '%time ago'), array('%time' => format_interval(abs($time_diff), 1)));

	$return['posts column'] = $return['total posts'] ? format_plural($return['total posts'],'1 post','@count posts').' &middot; '.t('last').' '.$last_posted : t('No posts yet');

	$sql = "SELECT node_comment_statistics.nid, node_comment_statistics.last_comment_timestamp FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d ORDER BY node_comment_statistics.last_comment_timestamp DESC LIMIT 1";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$time_diff = time() - $result['last_comment_timestamp'];
	$last_commented = t(($time_diff < 0 ? '%time hence' : '%time ago'), array('%time' => format_interval(abs($time_diff), 1)));

	$return['comments column'] = $return['total comments'] ? format_plural($return['total comments'],'1 comment','@count comments').' &middot; '.t('last').' '.$last_commented : NULL;
	return $return;
}