<?php

require_once('cmtls_event.features.inc');

/**
 * Implements hook_cmtls_context()
 *
 * The edit button for events
 *
 * @return unknown
 */
function cmtls_event_cmtls_context() {
	return array(
		'cmtls_event' => array(
			'cmtls_event_edit' => array(
				'title' => t('Edit event'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_event') . '/js/context_actions.js',
	);
}

function cmtls_event_init() {
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	if ($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_event') {
		drupal_add_feed(url('cmtls/' . $current_group->nid . '/' . $current_app->nid . '/rss', array('absolute' => TRUE)), $app->title);
	}

	drupal_add_js(drupal_get_path('module', 'cmtls_event') . '/js/app.js');
}

/**
 * Implementation of hook_cmtls_app()
 *
 * @return unknown
 */
function cmtls_event_cmtls_app()
{
	return array(
		'cmtls_event' => array(
			'title' => t('Events'),
			'callback' => 'cmtls_events_page',
			'node type title' => t('event'),
		),
	);
}

/**
 * Implementation of hook_cmtls_map_config()
 *
 * @return array
 */
function cmtls_event_cmtls_map_config()
{
	return array(
		'cmtls_event' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-white',
				'select' => 'cmtls-location-white-hover',
				'temporary' => 'cmtls-location-white',
			),
			'add from map' => TRUE,
			'is mappable' => TRUE,
		),
	);
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_event_menu() {
	$items = array();

	$items['cmtls/%node/%node/event/%node'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_event_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/%node/edit'] = array(
		'title' => 'event',
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_event', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/%node/delete'] = array(
		'title' => t('Delete event'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_event'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_event')),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/%node/send_mail'] = array(
		'title' => t('Send e-mail to participants'),
		'page callback' => 'cmtls_event_send_email_page',
		'page arguments' => array(4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

    $items['cmtls/%node/%node/event/%node/add_to_calendar.ics'] = array(
       'title' => 'Add to calendar',
       'page callback' => 'cmtls_event_ics_download',
       'page arguments' => array(4),
       'access callback' => 'node_access',
       'access arguments' => array('view', 4),
       'type' => MENU_CALLBACK,
    );
    
    $items['cmtls/%node/%node/calendar/ajax'] = array(
       'title' => 'Add to calendar',
       'page callback' => 'cmtls_event_calendar_ajax_repsonse',
       'page arguments' => array(2),
       'access callback' => 'node_access',
       'access arguments' => array('view', 2),
       'type' => MENU_CALLBACK,
    );

	return $items;
}

/**
 * Event detail view
 *
 * @param node $group
 * @param node $app
 * @param node $event
 * @return string
 */
function cmtls_event_page($group, $app, $event) {
	if ($event->type != 'cmtls_event') {
		return t('This is not an event.');
	}

	return views_embed_view('cmtls_events', 'default', $app->nid, $event->nid);
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_event_form_alter(&$form, &$form_state, $form_id)
{
	// NB! this cant be moved to cmtls_event_form_cmtls_event_node_form_alter because the default date will be lost
	// prepare event node form for cleanup
	if($form_id == 'cmtls_event_node_form' && _cmtls_is())
	{
		$form = cmtls_forms_alter($form, &$form_state);

		// new form
		if (!$form['nid']['#value'])
		{
			$form['field_cmtls_event_date'][0]['#default_value']['value'] = date('Y-m-d 10:00', strtotime('tomorrow'));
			$form['field_cmtls_event_date'][0]['#default_value']['value2'] = date('Y-m-d 11:00', strtotime('tomorrow'));
		}

		$form['#after_build'][] = 'cmtls_event_form_after_build';
	}
}

/**
 * Clean up and defaults for event node
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_event_form_after_build($form, &$form_state)
{
	$form['field_cmtls_event_lasts_all_day']['value']['#title'] = t('Event lasts all day');
	$form['taxonomy']['tags'][1]['#title'] = t('Event keywords');

//printr($form); exit;

	return $form;
}

/**
 * Implements hook_theme()
 * Adds the event view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_event_theme($existing) {
	return array(
		// events page
		'cmtls_events_horizontal_calendar' => array (
			'arguments' => array('current_date' => NULL, 'selected_date' => NULL, 'days' => NULL),
			'template' => 'cmtls-events-horizontal-calendar',
			'path' => drupal_get_path('module', 'cmtls_event').'/theme',
		),
		// events page
		'cmtls_events_content' => array (
			'arguments' => array('app_id' => NULL),
			'template' => 'cmtls-events-content',
			'path' => drupal_get_path('module', 'cmtls_event').'/theme',
		),
		// events title
		'cmtls_event_node_title' => array (
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-event-node-title',
			'original hook' => 'cmtls_node_title',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		// events view
		'views_view__cmtls_events__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-events--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_unformatted__cmtls_events__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-events--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_fields__cmtls_events__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-events--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		// events dashboard contents
		'views_view__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-events--block-1',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_unformatted__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-events--block-1',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_fields__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-events--block-1',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
	);
}

/**
 * Get the relative path of the event
 *
 * @param node $event
 * @param node $group
 * @return string
 */
function cmtls_event_path($event, $group = NULL) {
	if (!$group) $group = _cmtls_group_get_current();

	return 'cmtls/' . $group->nid . '/' . $event->parent . '/event/' . $event->nid;
}

/**
 * Implements hook_cmtls_dashboard_block_content()
 *
 * @param unknown_type $group
 * @param unknown_type $app
 * @return unknown
 */
function cmtls_event_cmtls_dashboard_block_content($group, $app) {
	return views_embed_view('cmtls_events', 'block_1', $app->nid);
}

function cmtls_event_cmtls_map_popup_content($feature) {
	$node = node_load($feature->nid);


	$body = explode(' ', strip_tags(check_markup($node->body)));

	if (sizeof($body) > 25) {
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}

	$body = implode(' ', $body);

	$start_date = date('d.m.Y', strtotime($node->field_cmtls_event_date[0]['value']));
	$start_time = date('H:i', strtotime($node->field_cmtls_event_date[0]['value']));
	$end_date = date('d.m.Y', strtotime($node->field_cmtls_event_date[0]['value2']));
	$end_time = date('H:i', strtotime($node->field_cmtls_event_date[0]['value2']));

	if ($node->field_cmtls_event_lasts_all_day[0]['value'])
	{
		$time = ($start_date == $end_date) ? $start_date : $start_date.' - '.$end_date;
	}
	else
	{
		$time = $start_date.' '.$start_time.($end_date || $end_time ? ' - ' :'').($end_date && $start_date != $end_date ? $end_date.' ' : '').$end_time;
	}

	$output = '<h1><a href="' . base_path() . cmtls_event_path($node) . '">' . check_plain($node->title) . ' &middot; ' . $time. '</a></h1>';
	$output .= '<div class="address">'.check_plain($node->field_cmtls_address[0]['value']).'</div>';
	$output .= '<div class="content">' . $body . '</div>';

	return $output;
}

/**
 * Generate and show .ics Calendar file
 *
 * @param node $node
 */
function cmtls_event_ics_download($node) {
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	$title = $node->title;
    $description = "Read more at " . url('cmtls/' . $current_group->nid . '/' . $current_app->nid . '/event/' . $node->nid, array('absolute' => TRUE));
    $location = $node->field_cmtls_address[0]['value'];

	if ($node->field_cmtls_event_lasts_all_day[0]['value']) {
		$dtstart = 'DTSTART;VALUE=DATE:' . date("Ymd", strtotime($node->field_cmtls_event_date[0]['value']));
		$dtend = 'DTEND;VALUE=DATE:' . date("Ymd", strtotime($node->field_cmtls_event_date[0]['value2']));
	}
	else {
		$dtstart = 'DTSTART:' . date("Ymd\THi00", strtotime($node->field_cmtls_event_date[0]['value']));
		$dtend = 'DTEND:' . date("Ymd\THi00", strtotime($node->field_cmtls_event_date[0]['value2']));
	}

	//DTSTART;VALUE=DATE:20100101
	//DTEND;VALUE=DATE:20100101

    $retval = "BEGIN:VCALENDAR
PRODID:-//Calendar//Calendar Event//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
$dtstart
$dtend
SUMMARY:$title
DESCRIPTION:$description
LOCATION:$location
SEQUENCE:0
END:VEVENT
END:VCALENDAR";

    drupal_set_header('Content-Type: text/calendar; charset=utf-8;');
    drupal_set_header('Content-Disposition: inline; filename="add_to_calendar.ics";');

    print $retval;

    exit();
}

function cmtls_events_page($app_id)
{
	if ($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_events', 'default', $app_id));
	}

	return theme('cmtls_events_content', $app_id);
}

/**
 * Implements hook_cmtls_stance_info()
 *
 */
function cmtls_event_cmtls_stance_info()
{
	return array(
		'cmtls_event' => array(
			'stance choices' => array(
				1 => t('Yes'),
				2 => t('Maybe'),
				3 => t('No'),
				0 => t('Unanswered'),
			),
			'default stance choice' => 0,
			'visible stance choices' => array(1, 2, 3),
			'stance form title' => t('Attending'),
		),
	);
}

/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_event_cmtls_filter_info()
{
	return array(
		'cmtls_event' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Next 7 days'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value >= NOW()',
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value <= DATE_ADD(NOW(), INTERVAL 7 DAY)',
						),
					), // where
				),
				array(
					'title' => t('Next 30 days'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value >= NOW()',
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value <= DATE_ADD(NOW(), INTERVAL 30 DAY)',
						),
					), // where
				),
				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 3,
					),
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => array(
					'node_data_field_cmtls_event_date.field_cmtls_event_date_value2 >= FROM_UNIXTIME(%d)',
					//'UNIX_TIMESTAMP(node_data_field_cmtls_event_date.field_cmtls_event_date_value2) >= %d',
				),
				'date to' => array(
					'node_data_field_cmtls_event_date.field_cmtls_event_date_value <= FROM_UNIXTIME(%d)',
					//'UNIX_TIMESTAMP(node_data_field_cmtls_event_date.field_cmtls_event_date_value) <= %d',
				),
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_data_field_cmtls_event_date.field_cmtls_event_date_value',
					'direction' => 'ASC',
					'title' => t('Event date'),
				),
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
				array(
					'field' => 'node_comment_statistics_comment_count',
					'direction' => 'DESC',
					'title' => t('Most commented'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
			),

		), // node type
	);
}

function cmtls_event_cmtls_app_links($node = NULL)
{
	return array(
		'cmtls_event' => array(
			'add' => 'event/add',
			'delete' => 'event/'.$node->nid.'/delete',
		),
	);
}

function cmtls_event_preprocess_cmtls_stance(&$vars)
{
	if($vars['node']->type == 'cmtls_event' && $vars['form'] && isset($vars['node']->field_cmtls_registration_open[0]['value']))
	{
		if(strtotime($vars['node']->field_cmtls_registration_open[0]['value']) < time())
		$vars['form'] = t('Registration is now closed');
	}
}

function cmtls_event_calendar_ajax_repsonse($app)
{
	cmtls_ajax_response(cmtls_event_horizontal_calendar($app->nid));
}

function cmtls_event_preprocess_cmtls_events_content(&$vars)
{
	$vars['calendar'] = cmtls_event_horizontal_calendar($vars['app_id']);
}

function cmtls_event_horizontal_calendar($app_id)
{
	$current_year = date('Y');
	$current_month = date('n');
	
	$current_date = array(
		'year' => $current_year,
		'month' => date('F'),
		'month_title' => $current_month,
		'day' => date('j'),
	);
	
	$today = strtotime('today');
	
	$selected_year = (int)$_GET['year'] ? (int)$_GET['year'] : ((int)$_GET['date_from'] ? date('Y', $_GET['date_from']) : $current_year);
	$selected_month = (int)$_GET['month'] ? (int)$_GET['month'] : ((int)$_GET['date_from'] ? date('n', $_GET['date_from']) : $current_month);
	
	$selected_date = array(
		'year' => $selected_year,
		'month' => $selected_month,
		'month_title' => date('F', strtotime($selected_year.'-'.$selected_month.'-01')),
		'day' => (int)$_GET['date_from'] ? date('j', (int)$_GET['date_from']) : NULL,
	);
	
	$days_in_selected_month = date('t', strtotime($selected_year.'-'.$selected_month.'-01'));
	
	$selected_month_time = strtotime($selected_year.'-'.$selected_month.'-01 00:00:00');
	
	for ($i = 1; $i <= $days_in_selected_month; $i++)
	{
		$day_time = $selected_month_time + (($i - 1) * 24 * 60 * 60);
		
		$selected_month_days[$i] = array(
			'weekday' => date('N', $day_time),
			'weekday_title' => date('l', $day_time),
			'is_today' => $day_time == $today ? TRUE : FALSE,
			'has_events' => FALSE,
		);
	}
	
	//printr($selected_month_days); exit;
	
	// no node access is checked, because if user has access to the app then all it's children should be accessible as well
	$sql = "SELECT DAY(content_type_cmtls_event.field_cmtls_event_date_value) AS start_day, MONTH(content_type_cmtls_event.field_cmtls_event_date_value) AS start_month, DAY(content_type_cmtls_event.field_cmtls_event_date_value2) AS end_day, MONTH(content_type_cmtls_event.field_cmtls_event_date_value2) AS end_month
	FROM {content_type_cmtls_event} AS content_type_cmtls_event
	LEFT JOIN {nodehierarchy} AS nodehierarchy ON content_type_cmtls_event.nid = nodehierarchy.nid
	WHERE
		((MONTH(content_type_cmtls_event.field_cmtls_event_date_value) = %d
			AND YEAR(content_type_cmtls_event.field_cmtls_event_date_value) = %d)
		OR
		(MONTH(content_type_cmtls_event.field_cmtls_event_date_value2) = %d
			AND YEAR(content_type_cmtls_event.field_cmtls_event_date_value2) = %d))
			
		AND nodehierarchy.parent = %d";
	
	$result = db_query($sql, $selected_month, $selected_year, $selected_month, $selected_year, $app_id);
	
	while ($row = db_fetch_array($result))
	{
		if($row['end_month'] != $selected_month)
		{
			$row['end_day'] = $days_in_selected_month;
		}
		
		if($row['start_month'] != $selected_month)
		{
			$row['start_day'] = 1;
		}
		
		for ($i = $row['start_day']; $i <= $row['end_day']; $i++)
		{
			$selected_month_days[$i]['has_events'] = TRUE;
			
			$day_time = $selected_month_time + (($i - 1) * 24 * 60 * 60);
			
			$selected_month_days[$i]['query'] = array(
					'action' => 'search',
					'date_from' => $day_time,
					'date_to' => $day_time,
			);
		}
	}
	
	//printr($current_month_days); exit;
	
	return theme('cmtls_events_horizontal_calendar', $current_date, $selected_date, $selected_month_days);
}

function cmtls_event_cmtls_group_overview($app)
{
	$return = array(
		'total comments' => 0,
		'total posts' => 0,
		'posts column' => NULL,
		'comments column' => NULL,
	);	
	
	$group_id = array_pop($app->og_groups);
	
	$sql = 'SELECT SUM(node_comment_statistics.comment_count) AS comments FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d AND node_comment_statistics.comment_count > 0';
	$result = db_fetch_array(db_query($sql, $app->nid));
	$return['total comments'] = $result['comments'];
	
	$sql = "SELECT count(node.nid) AS posts FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid LEFT JOIN {content_type_cmtls_event} AS content_type_cmtls_event ON node.nid = content_type_cmtls_event.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_event' AND content_type_cmtls_event.field_cmtls_event_date_value > NOW()";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$upcoming = $result['posts'];
	if (!$upcoming) $upcoming = NULL;	
	
	$sql = "SELECT count(node.nid) AS posts FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node} AS node ON nodehierarchy.nid = node.nid LEFT JOIN {content_type_cmtls_event} AS content_type_cmtls_event ON node.nid = content_type_cmtls_event.nid WHERE nodehierarchy.parent = %d AND node.type = 'cmtls_event' AND content_type_cmtls_event.field_cmtls_event_date_value < NOW()";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$past = $result['posts'];
	if (!$past) $past = NULL;	
	
	$return['total posts'] = $upcoming + $past;
	
	if($upcoming) $upcoming = l(format_plural($upcoming,'1 upcoming','@count upcoming'), 'cmtls/'.$group_id.'/'.$app->nid);
	
	if($upcoming && $past) $upcoming .= ' &middot; ';
	
	if($past) $past = format_plural($past,'1 in past','@count in past');
	
	if($upcoming || $past)
	{
		$return['posts column'] = $upcoming.$past;
	}
	else 
	{
		$return['posts column'] = t('No events posted');
	}
	
	$sql = "SELECT node_comment_statistics.nid, node_comment_statistics.last_comment_timestamp FROM {nodehierarchy} AS nodehierarchy LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON nodehierarchy.nid = node_comment_statistics.nid WHERE nodehierarchy.parent = %d ORDER BY node_comment_statistics.last_comment_timestamp DESC LIMIT 1";
	$result = db_fetch_array(db_query($sql, $app->nid));
	$last_commented = cmtls_format_date_ago($result['last_comment_timestamp']);
	
	$return['comments column'] = $return['total comments'] ? format_plural($return['total comments'],'1 comment','@count comments').' &middot; '.t('last').' '.$last_commented : NULL;	
	
	return $return;
}

function cmtls_event_views_query_alter(&$view, &$query)
{
	if($view->name == 'cmtls_events')
	{
		// do not filter based on date in detail view
		if(isset($view->args[1]))
		{
			unset($view->query->where['date']);
		}
		
		// if filter module is being used do not filter based on date
		if(isset($_GET['date_from']))
		{
			unset($view->query->where['date']);
		}
	}
}

function cmtls_event_send_email_page($event)
{
	// Send the Modal Frame javascript for child windows to the page.
	modalframe_child_js();
	
	global $user;
	
	if(!$user->uid) return FALSE;
	
	$to = array();
		
	$sql = "SELECT uid FROM {cmtls_member_stance} WHERE parent = %d AND stance = 1";
	$result = db_query($sql, $event->nid);
	
	while ($uid = db_fetch_array($result))
	{
		$to[] = $uid;
	}
	
	$settings = array(
		'from' => $user->uid,
		'to' => $to,
	);
	
	$output = drupal_get_form('cmtls_member_send_email_form', $settings);
	
	return $output;
}

function cmtls_event_date_format(&$node)
{
	if ($node->field_cmtls_event_lasts_all_day['0']['value'])
	{
		return t('Whole day');
	}
	
	$current_year = date('Y');
	
	$start_timestamp = strtotime($node->field_cmtls_event_date[0]['value']);
	$start_year = date('Y', $start_timestamp);
	$start_date = date('d.m', $start_timestamp) . ($current_year != $start_year ? '.' . $start_year : '');
	$start_time = date('H:i', $start_timestamp);
	
	$end_timestamp = strtotime($node->field_cmtls_event_date[0]['value2']);
	$end_year = date('Y', $end_timestamp);
	$end_date = date('d.m', $end_timestamp).($current_year != $end_year ? '.' . $end_year : '');
	$end_time = date('H:i', $end_timestamp);
	
	$date = $start_time.' -'.($start_date != $end_date ? ' '.$end_date : NULL).($end_time != $start_time ? ' '.$end_time : NULL);
	
	return $date;
}