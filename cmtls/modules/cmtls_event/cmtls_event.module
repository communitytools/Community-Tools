<?php

require_once('cmtls_event.features.inc');

/**
 * Implements hook_cmtls_context()
 *
 * The edit button for events
 *
 * @return unknown
 */
function cmtls_event_cmtls_context() {
	return array(
		'cmtls_event' => array(
			'cmtls_event_edit' => array(
				'title' => t('Edit event'),
				'access callback' => 'node_access',
				'access arguments' => array('update', 'node'),
			),
		),
		'script' => drupal_get_path('module', 'cmtls_event') . '/js/context_actions.js',
	);
}

function cmtls_event_init() {
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	if ($current_app->field_cmtls_app_type[0]['value'] == 'cmtls_event') {
		drupal_add_feed(url('cmtls/' . $current_group->nid . '/' . $current_app->nid . '/rss', array('absolute' => TRUE)), $app->title);
	}

	drupal_add_js(drupal_get_path('module', 'cmtls_event') . '/js/app.js');
}

/**
 * Implementation of hook_cmtls_app()
 *
 * @return unknown
 */
function cmtls_event_cmtls_app()
{
	return array(
		'cmtls_event' => array(
			'title' => t('Events'),
			'callback' => 'cmtls_events_page',
			'node type title' => t('event'),
		),
	);
}

/**
 * Implementation of hook_cmtls_map_config()
 *
 * @return array
 */
function cmtls_event_cmtls_map_config()
{
	return array(
		'cmtls_event' => array(
			'map views' => array(
				CMTLS_MAP_NONE,
				CMTLS_MAP_VIEW_HIDDEN,
				CMTLS_MAP_VIEW_HALF_PAGE,
				CMTLS_MAP_VIEW_FULL_PAGE,
			),
			'default map view' => CMTLS_MAP_VIEW_HALF_PAGE,
			'map view changable' => TRUE,
			'default map styles' => array(
				'default' => 'cmtls-location-white',
				'select' => 'cmtls-location-white-hover',
				'temporary' => 'cmtls-location-white',
			),
			'add from map' => TRUE,
			'is mappable' => TRUE,
		),
	);
}

/**
 * Implementation of hook_menu().
 *
 * @return array menu items
 */
function cmtls_event_menu() {
	$items = array();

	$items['cmtls/%node/%node/event/%node'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(4),
		'page callback' => 'cmtls_event_page',
		'page arguments' => array(1, 2, 4),
		'access callback' => 'node_access',
		'access arguments' => array('view', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/%node/edit'] = array(
		'title' => 'event',
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_event', 4),
		'access callback' => 'node_access',
		'access arguments' => array('update', 4),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/%node/delete'] = array(
		'title' => 'Delete event',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('node_delete_confirm', 4),
		'access callback' => 'node_access',
		'access arguments' => array('delete', 4),
		'file' => 'node.pages.inc',
		'file path' => drupal_get_path('module', 'node'),
		'type' => MENU_CALLBACK,
	);

	$items['cmtls/%node/%node/event/add'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_node_edit_page',
		'page arguments' => array('cmtls_event'),
		'access callback' => 'node_access',
		'access arguments' => array('create', (object)array('type' => 'cmtls_event')),
		'type' => MENU_CALLBACK,
	);

    $items['cmtls/%node/%node/event/%node/add_to_calendar.ics'] = array(
       'title' => 'Add to calendar',
       'page callback' => 'cmtls_event_ics_download',
       'page arguments' => array(4),
       'access callback' => 'node_access',
       'access arguments' => array('view', 4),
       'type' => MENU_CALLBACK,
    );

	$items['cmtls/%node/%node/event/tag/%'] = array(
		'title callback' => 'cmtls_page_title',
		'title arguments' => array(2),
		'page callback' => 'cmtls_event_page_taxonomy',
		'page arguments' => array(1, 2, 5),
		'access callback' => 'node_access',
		'access arguments' => array('view', 2),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Event detail view
 *
 * @param node $group
 * @param node $app
 * @param node $event
 * @return string
 */
function cmtls_event_page($group, $app, $event) {
	if ($event->type != 'cmtls_event') {
		return t('This is not an event.');
	}

	return views_embed_view('cmtls_events', 'default', $app->nid, $event->nid);
}

/**
 * Events filtered by taxonomy term/tag view
 *
 * @param node $group
 * @param node $app
 * @param string $taxonomy
 * @return string
 */
function cmtls_event_page_taxonomy($group, $app, $taxonomy) {
	return views_embed_view('cmtls_events', 'default', $app->nid, 'all', $taxonomy);
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_event_form_alter(&$form, &$form_state, $form_id)
{
	// NB! this cant be moved to cmtls_event_form_cmtls_event_node_form_alter because the default date will be lost
	// prepare event node form for cleanup
	if($form_id == 'cmtls_event_node_form' && _cmtls_is())
	{
		$form = cmtls_forms_alter($form, &$form_state);

		// new form
		if (!$form['nid']['#value'])
		{
			$form['field_cmtls_event_date'][0]['#default_value']['value'] = date('Y-m-d 10:00', strtotime('tomorrow'));
			$form['field_cmtls_event_date'][0]['#default_value']['value2'] = date('Y-m-d 11:00', strtotime('tomorrow'));
		}

	}
	$form['#after_build'][] = 'cmtls_event_form_after_build';
}

/**
 * Clean up and defaults for event node
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_event_form_after_build($form, &$form_state)
{
	$form['field_cmtls_event_lasts_all_day']['value']['#title'] = t('Event lasts all day');
	$form['taxonomy']['tags'][1]['#title'] = t('Event keywords');

	return $form;
}

/**
 * Implements hook_theme()
 * Adds the event view templates
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_event_theme($existing) {
	return array(
		// stance
/*		'cmtls_stance' => array (
			'arguments' => array('node' => NULL, 'form' => NULL),
			'template' => 'cmtls-stance',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),*/
		// events page
		'cmtls_events_content' => array (
			'arguments' => array('app_id' => NULL),
			'template' => 'cmtls-events-content',
			'path' => drupal_get_path('module', 'cmtls_event').'/theme',
		),
		// events view
		'views_view__cmtls_events__default' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-events--default',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_unformatted__cmtls_events__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-events--default',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_fields__cmtls_events__default' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-events--default',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		// events dashboard contents
		'views_view__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL),
			'template' => 'views-view--cmtls-events--block-1',
			'original hook' => 'views_view',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_unformatted__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
			'template' => 'views-view-unformatted--cmtls-events--block-1',
			'original hook' => 'views_view_unformatted',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
		'views_view_fields__cmtls_events__block_1' => array (
			'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL, 'field_alias' => NULL),
			'template' => 'views-view-fields--cmtls-events--block-1',
			'original hook' => 'views_view_fields',
			'path' => drupal_get_path('module', 'cmtls_event') . '/theme',
		),
	);
}

/**
 * Get the relative path of the event
 *
 * @param node $event
 * @param node $group
 * @return string
 */
function cmtls_event_path($event, $group = NULL) {
	if (!$group) $group = _cmtls_group_get_current();

	return 'cmtls/' . $group->nid . '/' . $event->parent . '/event/' . $event->nid;
}

/**
 * Implements hook_cmtls_dashboard_block_content()
 *
 * @param unknown_type $group
 * @param unknown_type $app
 * @return unknown
 */
function cmtls_event_cmtls_dashboard_block_content($group, $app) {
	return views_embed_view('cmtls_events', 'block_1', $app->nid);
}

function cmtls_event_cmtls_map_popup_content($feature) {
	$node = node_load($feature->nid);


	$body = explode(' ', strip_tags(check_markup($node->body)));

	if (sizeof($body) > 25) {
		$body = array_slice($body, 0, 25);
		$body[] = '...';
	}

	$body = implode(' ', $body);

	$start_date = date('d.m.Y', strtotime($node->field_cmtls_event_date[0]['value']));
	$start_time = date('H:i', strtotime($node->field_cmtls_event_date[0]['value']));
	$end_date = date('d.m.Y', strtotime($node->field_cmtls_event_date[0]['value2']));
	$end_time = date('H:i', strtotime($node->field_cmtls_event_date[0]['value2']));

	if ($node->field_cmtls_event_lasts_all_day[0]['value'])
	{
		$time = ($start_date == $end_date) ? $start_date : $start_date.' - '.$end_date;
	}
	else
	{
		$time = $start_date.' '.$start_time.($end_date || $end_time ? ' - ' :'').($end_date && $start_date != $end_date ? $end_date.' ' : '').$end_time;
	}

	$output = '<h1><a href="' . base_path() . cmtls_event_path($node) . '">' . check_plain($node->title) . ' &middot; ' . $time. '</a></h1>';
	$output .= '<div class="address">'.check_plain($node->field_cmtls_address[0]['value']).'</div>';
	$output .= '<div class="content">' . $body . '</div>';

	return $output;
}

/**
 * Generate and show .ics Calendar file
 *
 * @param node $node
 */
function cmtls_event_ics_download($node) {
	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	$title = $node->title;
    $description = "Read more at " . url('cmtls/' . $current_group->nid . '/' . $current_app->nid . '/event/' . $node->nid, array('absolute' => TRUE));
    $location = $node->field_cmtls_address[0]['value'];

	if ($node->field_cmtls_event_lasts_all_day[0]['value']) {
		$dtstart = 'DTSTART;VALUE=DATE:' . date("Ymd", strtotime($node->field_cmtls_event_date[0]['value']));
		$dtend = 'DTEND;VALUE=DATE:' . date("Ymd", strtotime($node->field_cmtls_event_date[0]['value2']));
	}
	else {
		$dtstart = 'DTSTART:' . date("Ymd\THi00", strtotime($node->field_cmtls_event_date[0]['value']));
		$dtend = 'DTEND:' . date("Ymd\THi00", strtotime($node->field_cmtls_event_date[0]['value2']));
	}

	//DTSTART;VALUE=DATE:20100101
	//DTEND;VALUE=DATE:20100101

    $retval = "BEGIN:VCALENDAR
PRODID:-//Calendar//Calendar Event//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
$dtstart
$dtend
SUMMARY:$title
DESCRIPTION:$description
LOCATION:$location
SEQUENCE:0
END:VEVENT
END:VCALENDAR";

    drupal_set_header('Content-Type: text/calendar; charset=utf-8;');
    drupal_set_header('Content-Disposition: inline; filename="add_to_calendar.ics";');

    print $retval;

    exit();
}

function cmtls_events_page($app_id)
{
	if ($_POST['ajax'] == 1)
	{
		cmtls_ajax_response(views_embed_view('cmtls_events', 'default', $app_id));
	}

	return theme('cmtls_events_content', $app_id);
}

/**
 * Implements hook_cmtls_stance_info()
 *
 */
function cmtls_event_cmtls_stance_info()
{
	return array(
		'cmtls_event' => array(
			'stance choices' => array(
				1 => t('Yes'),
				2 => t('Maybe'),
				3 => t('No'),
				0 => t('Unanswered'),
			),
			'default stance choice' => 0,
			'visible stance choices' => array(1, 2, 3),
			'stance form title' => t('Attending'),
		),
	);
}


/**
 * Implements hook_cmtls_filter_info()
 *
 */
function cmtls_event_cmtls_filter_info()
{
	return array(
		'cmtls_event' => array(
			'filter predefined options' => array(
				array(
					'title' => t('Next 7 days'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value >= NOW()',
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value <= DATE_ADD(NOW(), INTERVAL 7 DAY)',
						),
					), // where
				),
				array(
					'title' => t('Next 30 days'),
					'default values' => array(
						'sort' => 0,
					),
					'where' => array(
						'clauses' => array(
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value >= NOW()',
							'node_data_field_cmtls_event_date.field_cmtls_event_date_value <= DATE_ADD(NOW(), INTERVAL 30 DAY)',
						),
					), // where
				),
				array(
					'title' => t('Most commented'),
					'default values' => array(
						'sort' => 2,
					),
				),
			), // filter predefined options

			'filter fields' => array(
				'tag' => TRUE,
				'search' => TRUE,
				'date from' => array('UNIX_TIMESTAMP(node_data_field_cmtls_event_date.field_cmtls_event_date_value) >= %d'),
				'date to' => array('UNIX_TIMESTAMP(node_data_field_cmtls_event_date.field_cmtls_event_date_value) <= %d'),
				'sort' => TRUE,
			), // filter fields

			'taxonomy dictionary id' => NULL,

			'sort options' => array(
				array(
					'field' => 'node_created',
					'direction' => 'DESC',
					'title' => t('Time added'),
				),
				array(
					'field' => 'node_title',
					'direction' => 'ASC',
					'title' => t('Title'),
				),
				array(
					'field' => 'node_comment_statistics_comment_count',
					'direction' => 'DESC',
					'title' => t('Most commented'),
				),
			), // sort options

			'default values' => array(
				'sort' => 0,
			),

		), // node type
	);
}

function cmtls_event_cmtls_app_links($node = NULL)
{
	return array(
		'cmtls_event' => array(
			'add' => 'event/add',
			'delete' => 'event/'.$node->nid.'/delete',
		),
	);
}
