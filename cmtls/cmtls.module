<?php

include_once('cmtls.features.inc');

function printr($var)
{
	echo '<pre>';
	print_r($var);
	echo '</pre>';
}

/**
 * Implements hook_init()
 * 
 * Adds context menu styles and scripts
 *
 */
function cmtls_init()
{
	global $language;
	
	// context menu
	drupal_add_css(drupal_get_path('module', 'cmtls').'/css/context_menu.css');
	drupal_add_js(drupal_get_path('module', 'cmtls') .'/js/jquery.contextMenu.js');
	drupal_add_js(drupal_get_path('module', 'cmtls') .'/js/app.js');
	drupal_add_css(drupal_get_path('module', 'cmtls').'/css/cmtls.css');
	drupal_add_js(drupal_get_path('module', 'cmtls') .'/js/jquery.livequery.min.js');
	
	// Send the Modal Frame javascript for parent windows to the page.
	modalframe_parent_js();
	
	drupal_set_html_head('<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js"></script>');
	
	drupal_add_js('var addthis_config = {
	ui_language: "'.$language->language.'",
	ui_cobrand: "Community Tools",
	ui_click: true,
	username: "communitytools",
	services_compact: "email, facebook, twitter, linkedin, orkut, tumblr, blogger, delicious, digg, more"
};', 'inline');
}

/**
 * Implents hook_nodeapi()
 * Adds context menu edit actions (by invoking hook_cmtls_context) and adds cmtls_context_button attribute to nodes
 *
 * @param node $node
 * @param string $op
 * @param unknown_type $a3
 * @param unknown_type $a4
 * @return array
 */
function cmtls_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
	global $user;
	
	static $binds;

	// some of the cck fields "forget" their value after saving
	if($op == 'insert' && $user->uid && strpos($node->type, 'cmtls_') === 0)
	{
		db_query("DELETE FROM {cache_content} WHERE cid LIKE '%content:%d%'", $node->nid);	
	}

	// Generate icons for uploaded files
	if ($op == 'load' && strpos($node->type, 'cmtls_') === 0)
	{
		module_load_include('inc', 'cmtls_gallery', 'cmtls_gallery.file_types');
		$file_types = cmtls_gallery_get_file_type_map();
		
		global $base_url;

		if (is_array($node->field_cmtls_files)) {
			foreach ($node->field_cmtls_files as $key => &$file) {
				if (is_array($file)) {
					// Figure out the object type we're about to render
					$file_extension = explode('.', $file['filename']);
					$file_extension = !empty($file_extension) ? strtolower(array_pop($file_extension)) : '';
					$object_type = isset($file_types[$file_extension]) ? $file_types[$file_extension]['type'] : '';

					// Render element according to type of object
					switch ($object_type) {
						case 'image':
							$file['imagecache_icon'] = theme('imagecache', 'small', $file['filepath'], $file['data']['description'], $file['data']['description']);
							break;
						case 'video':
						case 'audio':
						default:
							$icon_name = (isset($file_types[$file_extension]) and isset($file_types[$file_extension]['icon'])) ? $file_types[$file_extension]['icon'] : strtolower($file_extension) . '.png';
							// Try to get icon for the file
							if (file_exists(drupal_get_path('module', 'cmtls_gallery') . '/icons/' . $icon_name)) {
								$icon = $base_url.'/'.drupal_get_path('module', 'cmtls_gallery') . '/icons/' . $icon_name;
							}
							else {
								// Try to get generic icon for file type
								if (file_exists(drupal_get_path('module', 'cmtls_gallery') . '/icons/' . $file_types[$file_extension]['type'] . '.png')) {
									$icon = $base_url.'/'.drupal_get_path('module', 'cmtls_gallery') . '/icons/' . $file_types[$file_extension]['type'] . '.png';
								// Use default icon for file
								}
								else {
									$icon = $base_url.'/'.drupal_get_path('module', 'cmtls_gallery') . '/icons/default.png';
								}
							}
							$file['imagecache_icon'] = '<img src="' . $icon . '" alt="' . $file['data']['description'] . '" />';
					}
					$file['imagecache_object_type'] = $object_type;
				}
			}
		}
	}

	if($op == 'load' && $user->uid && strpos($node->type, 'cmtls_') === 0)
	{
		$context = module_invoke_all('cmtls_context');
		
		if(is_array($context['script']))
		{
			foreach($context['script'] as $script)
			{
				drupal_add_js($script);
			}
			
		}
		else 
		{
			drupal_add_js($context['script']);
		}
		
		unset($context['script']);
		
		$context_actions = array();
		$add_json = array();
		
		foreach ($context as $node_type => &$actions) if($node_type == $node->type)
		{
			foreach($actions as $name => $action)
			{
				if(isset($action['access callback']))
				{
					if(isset($action['access arguments']))
					{
						// replace 'node' in argument list with $node
						foreach($action['access arguments'] as &$arg)
						{
							switch ($arg)
							{
								case 'node':
									$arg = $node;
									$add_json['node'] = 1;
								break;
							
								/*
								case 'user':
									$arg = $user;
									$add_json['user'] = 1;
								break;
								*/
							
								default: break;
							}
						}
						
						if(call_user_func_array($action['access callback'], $action['access arguments']))
						{
							$context_actions[$name] = $action;
						}
					}
					elseif($actions['access callback']()) 
					{
						$context_actions[$name] = $action;
					}
				}
				else 
				{
					$context_actions[$name] = $action;
				}
				
				// add the bind
				if(!isset($binds[$name]))
				{
					$bind = "$.fn.contextMenu.addAction({name: '".$name."', title: '".$action['title']."', bind: ".$name."});";
					
					drupal_add_js($bind, 'inline');
					
					$binds[$name] = 1;
				}
			}
		}
		
		$anchor = '';
		
		if(sizeof($context_actions))
		{
			$buttons = implode(',', array_keys($context_actions));
			$anchor_src = base_path().'sites/all/themes/cmtls_theme/images/edit.png';
			
			$anchor = '<img src="'.$anchor_src.'" class="context_anchor" width="24" height="24" buttons="'.$buttons.'"';
			
			if(isset($add_json['node']))
			{
				$node_json = _cmtls_node_json($node);
				$anchor .= " object='".$node_json."'";
			}
			
			$anchor .= '>';
			
		}
		
	    //printr($context_actions); // exit;
		return array('cmtls_context_button' => $anchor);
	}

}


/**
 * Helper function to filter node attributes
 *
 * @return array
 */
function _cmtls_node_attributes()
{
	return array(
		'nid',
		'uid',
		'name',
		'type',
		'language',
		'status',
		'created',
	);
}

function _cmtls_node_json_prepare($node)
{
	$node_json = array();
	
	foreach(_cmtls_node_attributes() as $attr)
	{
		$node_json[$attr] = $node->$attr;
	}
	
	return (object)$node_json;
}

/**
 * Helper function to encode a node to json
 *
 * @param node $node
 * @return string
 */
function _cmtls_node_json($node)
{
	return json_encode(_cmtls_node_json_prepare($node));
}


/**
 * Implements hook_form_alter
 * prepare app node form for cleanup
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cmtls_form_alter(&$form, &$form_state, $form_id)
{
	if($form_id == 'node_delete_confirm' && _cmtls_is())
	//if($form_id == 'node_delete_confirm')
	{
		// Send the Modal Frame javascript for child windows to the page.
		modalframe_child_js();
		
		if($form['actions']['cancel'])
		{
			$form['actions']['cancel'] = array(
				'#value' => '<a href="javascript:void(0);" onclick="Drupal.modalFrameChild.triggerParentEvent(\'childClose\', false); return false;">'.t('Cancel').'</a>',
			);
		}
		
		$form['#submit'][] = 'cmtls_delete_confirm_submit';
		
		$form['#node'] = node_load($form['nid']['#value']);
		
	    $form_state['redirect']  = NULL;
	}
	
	if($form_id == 'page_node_form' && $_GET['preselect_menu'] == 'cmtls-site-menu')
	{
		$form['menu']['parent']['#default_value'] = 'cmtls-site-menu:0';
		$form['menu']['link_title']['#required'] = 1;
	}
	
	//printr($form); exit;
}

function cmtls_delete_confirm_submit($form, &$form_state)
{
	$node = $form['#node'];
	
	if($node->type == 'cmtls_group')
	{
		//$main_group = _cmtls_group_get_main();
		//$redirect = base_path().'cmtls/'.$main_group->nid;
		
		$redirect = base_path().'cmtls/list';
	}
	elseif ($node->type == 'cmtls_app')
	{
		$current_group = _cmtls_group_get_current();
		$redirect = base_path().'cmtls/'.$current_group->nid;
	}
	else 
	{
		$current_group = _cmtls_group_get_current();
		$current_app = _cmtls_app_get_current($current_group);
		$redirect = base_path().'cmtls/'.$current_group->nid.'/'.$current_app->nid;
	}
	
	// Tell the parent window to close the modal frame dialog.
	modalframe_close_dialog(array(
		'redirect' => $redirect,
	));
}

/**
 * Common install procedures
 *
 * @param string $module_name 
 */
function cmtls_module_install($module_name)
{
	// Sets the weigth below the Views module, so the preprocessors can kick in for the views templates
	db_query("UPDATE {system} SET weight = 11 WHERE name = '%s'", $module_name);
}

/**
 * The context edit menu for nodes hook example
 *
 * @return array
 */
function hook_cmtls_context()
{
	return array(
		'example_node_type' => array(
			'example_action_function' => array(
				'title' => 'Example action',
				'access callback' => 'example_access',
				'access arguments' => array(),
			),
			'example_action_function2' => array(
				'title' => 'Example action 2',
			),
		),
		'script' => 'js/example_actions.js',
	);
}

/**
 * Helper function to determine if this is the CT subsite
 *
 * @return boolean
 */
function _cmtls_is()
{
	if(arg(0) == 'cmtls')
	{
		return TRUE;
	}
	else 
	{
		return FALSE;
	}
}

/**
 * returns the node::cmtls_context_button attribute containing the edit button HTML
 *
 * @param integer $nid the node ID
 * @return string
 */
function _cmtls_edit_button($node)
{
	if(!is_object($node))
	{
		$node = node_load($node);
	}
	
	return $node->cmtls_context_button;
}

/**
 * Returns the Drupal path to the node, false if no pathing function is found
 * Each module should implement the node type pathing function <NODE_TYPE>_path($node, $group)
 *
 * @param integer $nid node ID
 * @param mixed $group the group node object or the group node ID, defaults to current group
 * @return mixed
 */
function cmtls_path_to_node($node, $group = NULL)
{
	static $nodes;
	
	if(!is_object($node)) $node = node_load($node);
	
	if(isset($nodes[$node->nid])) return $nodes[$node->nid];
	
	if($group && !is_object($group)) $group = node_load($group);
	
	if(!$group->nid) $group = _cmtls_group_get_current();
	
	$path_function = $node->type.'_path';
	
	if(function_exists($path_function))
	{
		$nodes[$node->nid] = $path_function($node, $group);
		return $nodes[$node->nid];
	}
	else 
	{
		return FALSE;
	}
}

function cmtls_node_edit_page($node_type, $node = NULL)
{
	// Send the Modal Frame javascript for child windows to the page.
	modalframe_child_js();
	
	module_load_include('inc', 'node', 'node.pages');
	
	if(!$node)
	{
		return node_add($node_type);
	}
	else 
	{
		return node_page_edit($node);
	}
}

function cmtls_mail($key, &$message, $params)
{
	$language = $message['language'];
	//$variables = user_mail_tokens($params['account'], $language);
	
	if($key == 'cmtls_mail')
	{
		$message['subject'] = $params['subject'];
		$message['body'][] = $params['body'];
	}
}

/**
 * Implementation of hook_perm
 */
function cmtls_perm()
{
	return array('administer cmtls');
}

/**
 * Implementation of hook_menu
 */
function cmtls_menu()
{
	$items = array();
	
	$items['admin/build/cmtls'] = array(
		'title' => t('Community Tools'),
		'description' => t('Community Tools configuration'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cmtls_config_form'),
		'access arguments' => array('administer cmtls'),
		'type' => MENU_NORMAL_ITEM
	);
	
	$items['admin/build/cmtls/notifications'] = array(
		'title' => t('Notifications'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -20,
	);
	
	$items['cmtls/node/%node'] = array(
		'title callback' => 'node_page_title',
		'title arguments' => array(2),
		'page callback' => 'node_page_view',
		'page arguments' => array(2),
		'access callback' => 'node_access',
		'access arguments' => array('view', 2),
		'type' => MENU_CALLBACK
	);
   
	return $items;
}

function cmtls_config_form(&$form_state)
{
	$form = array();
	
	$form['cmtls_comment_notifications'] = array(
		'#type' => 'checkbox',
		'#title' => t('Send notifications about new comments to users'),
		'#description' => t('Notifications are sent the owner of the commented node and all commenters in that node'),
		'#default_value' => variable_get('cmtls_comment_notifications', '1'),
	);
	
	$form['cmtls_daily_digest'] = array(
		'#type' => 'checkbox',
		'#title' => t('Send daily e-mail about new content to users'),
		'#description' => t('Notifications are sent daily about new content and commented content within last 24hrs'),
		'#default_value' => variable_get('cmtls_daily_digest', '1'),
	);
	
	// Make a system setting form and return
	return system_settings_form($form);
}

function cmtls_block($op = 'list', $delta = 0, $edit = array())
{
	global $user;
		
	if($op == 'list')
	{
		$blocks = array();
		
		$blocks['powered_by_cmtls'] = array(
			'info' => t('Powered by Community Tools'),
			'weight' => '10',
			// Not worth caching.
			'cache' => BLOCK_NO_CACHE,
		);
		
		$blocks['cmtls_site_menu'] = array(
			'info' => t('Community Tools: site menu'),
			'status' => 1,
			'region' => 'cmtls_site_menu',
		);
		
		return $blocks;
	}
	
	if($op == 'view' && $delta == 'powered_by_cmtls')
	{
		$image_path = url(drupal_get_path('theme', 'cmtls_theme').'/images/ct-logo-small.png', array('absolute' => TRUE));
		
		$block = array(
			'subject' => NULL, // Don't display a title
			'content' => '<a href="http://www.communitytools.info/"><img border="0" src="'.$image_path.'" title="'.t('Powered by Community Tools').'" alt="'.t('Powered by Community Tools').'"></a>',
		);
		
		return $block;
	}
	
	if($op == 'view' && $delta == 'cmtls_site_menu')
	{
		$menu = menu_tree_all_data('cmtls-site-menu');
		
		//printr($menu); exit;
		
		foreach ($menu as &$data) if(strpos($data['link']['href'], 'node/') === 0)
		{
			$data['link']['href'] = 'cmtls/'.$data['link']['href'];
		}
		
		// page add link for admins
		if($user->uid == 1 || in_array('admin', $user->roles))
		{
			$menu['cmtls_site_menu_add'] = array(
				'link' => array(
					'link_title' => t('+ Add page'),
					'link_path' => 'node/add/page',
					'title' => t('+ Add page'),
					'href' => 'node/add/page',
					'localized_options' => array(
						'query' => 'preselect_menu=cmtls-site-menu',
						'attributes' => array(
							'target' => '_blank',
						),
					),
				),
			);
		}
		
		//printr($menu); exit;
		
		$block = array(
			'content' => theme('cmtls_site_menu', menu_tree_output($menu)),
		);
		
		return $block;
	}
}

function cmtls_cron()
{
	if(!variable_get('cmtls_daily_digest', '1')) return;
	
	$today = strtotime('today');
	// send @ 12:00
	$send_time = $today + 12 * 60 * 60;
	$last_send = variable_get('cmtls_daily_digest_send', 1);
	
	if(!($today > $last_send && $send_time < time()))
	{
		return;
	}
	
	// send only the last 24hrs
	$last_send = time() - 24 * 60 * 60;
	
	$mail_contents = array(
		'new_groups' => array(),
		'new_content' => array(),
		'commented_content' => array(),
	);
	
	// get users and their groups
	$users = array();
	
	$users_sent = 0;
	
	$sql = "SELECT users.uid, users.name as username, users.mail, profile_values.value AS name, users.data, users.language, (SELECT GROUP_CONCAT(sub_og_uid.nid) FROM {og_uid} AS sub_og_uid WHERE sub_og_uid.uid = users.uid) AS groups FROM {users} AS users LEFT JOIN {profile_values} AS profile_values ON users.uid = profile_values.uid WHERE profile_values.fid = 2";
	$result = db_query($sql);
	while ($user = db_fetch_object($result))
	{
		$user->groups = explode(',', $user->groups);
		$user->data = unserialize($user->data);
		
		$users[$user->uid] = $user;
	}
	//printr($users); exit;
	
	// get all the groups
	$groups = array();
	
	$sql = "SELECT * FROM {node} WHERE type = 'cmtls_group' AND status = 1";
	$result = db_query($sql);
	while ($group = db_fetch_object($result))
	{
		if($group->created > $last_send)
		{
			$group->new = 1;
			
			$mail_contents['new_groups'][$group->nid] = '"'.$group->title.'" by '.$users[$group->uid]->name.' ('.url('cmtls/'.$group->nid, array('absolute' => TRUE	)).')';
		}
		else 
		{
			$group->new = 0;
		}
		
		$groups[$group->nid] = $group;
	}
	
	$apps = array();
	
	// get all the apps
	$sql = "SELECT * FROM {node} AS node LEFT JOIN {nodehierarchy} AS nodehierarchy ON node.nid = nodehierarchy.nid WHERE node.type = 'cmtls_app' AND node.status = 1 AND nodehierarchy.parent <> 0";
	$result = db_query($sql);
	while ($app = db_fetch_object($result))
	{
		$groups[$app->parent]->apps[$app->nid] = $app;
	}
	
	// get fresh content
	$sql = "SELECT node.nid, node.title, node.created, node_revisions.body AS body, nodehierarchy.parent, node_comment_statistics.comment_count, node_comment_statistics.last_comment_timestamp FROM
	{node} AS node
	LEFT JOIN {nodehierarchy} AS nodehierarchy ON node.nid = nodehierarchy.nid
	LEFT JOIN {node_revisions} AS node_revisions ON node.vid = node_revisions.vid
	LEFT JOIN {node_comment_statistics} AS node_comment_statistics ON node.nid = node_comment_statistics.nid
	WHERE
	node.type NOT IN ('cmtls_group', 'cmtls_app')
	AND node.type LIKE 'cmtls_%'
	AND node.status = 1
	AND nodehierarchy.parent <> 0
	AND (node.created > %d OR (node_comment_statistics.comment_count > 0 AND node_comment_statistics.last_comment_timestamp > %d))";
	
	//printr($sql);
	$new_content_group_ids = array();
	$new_content_app_ids = array();
	
	$result = db_query($sql, $last_send, $last_send);
	
	// mark this before sending starts to avoid multiple mails per day
	variable_set('cmtls_daily_digest_send', time());
	
	while ($content = db_fetch_object($result))
	{
		//printr($content);
		foreach ($groups as $group_id => &$group)
		{
			if(in_array($content->parent, array_keys($group->apps)))
			{
				$group->apps[$content->parent]->content[$content->nid] = $content;
				
				if(!in_array($group_id, $new_content_group_ids))
				{
					$new_content_group_ids[$group_id] = $group_id;
				}
				
				if(!in_array($content->parent, $new_content_app_ids))
				{
					$new_content_app_ids[$content->parent] = $content->parent;
				}
				
				break;
			}
		}
		
		if($content->created > $last_send)
		{
			$htmltotext = drupal_html_to_text($content->body);
			$teaser = drupal_html_to_text(node_teaser($content->body, NULL, 200));
			if($teaser && strlen($htmltotext) > strlen($teaser))
			{
				$teaser = preg_replace("/\n\n$/", '...', $teaser);
			}
			elseif($teaser)
			{
				$teaser = preg_replace("/\n\n$/", '', $teaser);
			}
			
			//if($teaser) $teaser .= "\n";
			
			if($teaser) $teaser = preg_replace('/^/m', "\t", $teaser);
			
			$mail_contents['new_content'][$content->parent][$content->nid] = '- '.$group->apps[$content->parent]->title.' > "'.$content->title.'"'.($content->comment_count && $content->last_comment_timestamp > $a_interval ? ' ('.$content->comment_count.') ' : NULL).' ('.url(cmtls_path_to_node($content->nid, $group), array('absolute' => TRUE)).')'.($teaser ? ':'."\n".$teaser : NULL);
		}
		else 
		{
			$mail_contents['commented_content'][$content->parent][$content->nid] = '- '.$group->apps[$content->parent]->title.' > "'.$content->title.'"'.($content->comment_count ? ' ('.$content->comment_count.') ' : ' ').'('.url(cmtls_path_to_node($content->nid, $group), array('absolute' => TRUE)).')';
		}
	}
	
	if(!empty($mail_contents['new_content']) || !empty($mail_contents['commented_content']) || !empty($mail_contents['new_groups']))
	{
		$site_name = variable_get('site_name', 'CT');
		$main_group = _cmtls_group_get_main();
		$profile_link = url('cmtls/'.$main_group->nid.'/member/', array('absolute' => TRUE));
		
		foreach($users as &$user) if(!isset($user->data['cmtls']['notifications']['group']) || $user->data['cmtls']['notifications']['group'])
		{
			$user_lang = user_preferred_language($user);
			
			// if any users groups has new content
			$user_new_content_group_ids = array_intersect($user->groups, $new_content_group_ids);
			
			if(!empty($user_new_content_group_ids) || !empty($mail_contents['new_groups']))
			{
				$body = '';
				
				foreach ($user_new_content_group_ids as &$group_id)
				{
					$content_body = '';
					$comments_body = '';
					
					$user_new_content_app_ids = array_intersect(array_keys($groups[$group_id]->apps), $new_content_app_ids);
					
					$i = 0;
					foreach ($user_new_content_app_ids as &$app_id)
					{
						if(!empty($mail_contents['new_content'][$app_id]) && (!isset($user->data['cmtls']['notifications']['apps']['daily'][$app_id]) || $user->data['cmtls']['notifications']['apps']['daily'][$app_id]))
						{
							$i++;
							$content_body .= implode("\n", $mail_contents['new_content'][$app_id])."\n";
						}
					}
						
					if($i > 0)
					{
						$content_body = t('New content in "!groupname"', array('!groupname' => $groups[$group_id]->title), $user_lang->language).":\n".$content_body."\n";
					}
					
					$i = 0;
					foreach ($user_new_content_app_ids as &$app_id)
					{
						if(!empty($mail_contents['commented_content'][$app_id]) && (!isset($user->data['cmtls']['notifications']['apps']['daily'][$app_id]) || $user->data['cmtls']['notifications']['apps']['daily'][$app_id]))
						{
							$i++;
							$comments_body .= implode("\n", $mail_contents['commented_content'][$app_id])."\n";
						}
					}
					
					if($i > 0)
					{
						$comments_body = t('New comments have been posted in "!groupname"', array('!groupname' => $groups[$group_id]->title), $user_lang->language).":\n".$comments_body."\n";
					}
					
					$body .= $content_body.$comments_body;
				}
				
				if(!empty($mail_contents['new_groups']))
				{
					$body .= t('The following new groups have been created', NULL, $user_lang->language).":\n";
					$body .= implode("\n", $mail_contents['new_groups'])."\n";
				}
				
				if($body)
				{
					$message = array(
						'subject' => t('!sitename daily summary', array('!sitename' => $site_name), $user_lang->language),
						'body' =>
							t('Hello !user_name', array('!user_name' => $user->name), $user_lang->language).','."\n\n".
							t('Here\'s a summary of !sitename daily changes', array('!sitename' => $site_name), $user_lang->language).':'."\n\n".
							$body.
							"\n"."\n".'---'."\n".
							$site_name.'. '.t('You can change your notification settings at !link', array('!link' => $profile_link.$user->uid), $user_lang->language)."\n"
						,
					);
					
					drupal_mail('cmtls', 'cmtls_mail', $user->mail, $user_lang, $message);
					//printr($message);
					
					$users_sent++;
				}
			}
		}
	}
	
	watchdog('cmtls', 'Daily digest sent to '.$users_sent.' members.');
}

/**
 * Implements hook_theme()
 *
 * @param unknown_type $existing
 * @return unknown
 */
function cmtls_theme($existing)
{
	return array(
		// pager
		'cmtls_pager' => array(
			'arguments' => array('href' => NULL),
			'template' => 'cmtls-pager',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_site_menu' => array(
			'arguments' => array('content' => NULL),
			'template' => 'cmtls-site-menu',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_sm_share' => array(
			'arguments' => array('href' => NULL),
			'template' => 'cmtls-sm-share',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_tags' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-tags',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_author' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-author',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_comment_links' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-comment-links',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_created_time' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-created-time',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_geolocation' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-geolocation',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_location' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-location',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_title' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-title',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_files' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-files',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
		'cmtls_node_detail_view_link' => array(
			'arguments' => array('node' => NULL),
			'template' => 'cmtls-node-detail-view-link',
			'path' => drupal_get_path('module', 'cmtls').'/theme',
		),
	);
}

function cmtls_ajax_response($content, $options = array())
{
	// add features
	$features = cmtls_map_format_features(_cmtls_map_features('get'));
	
	print drupal_json(array('content' => $content, 'features' => $features, 'options' => $options));
	exit;
}

/**
 * Add comments to fields view
 * 
 * @param object $vars
 */
function cmtls_preprocess(&$vars, $hook)
{
	if ($hook != 'cmtls_sm_share' && strpos($hook, 'views_view_fields') === 0 && isset($vars['view']) && isset($vars['fields']) && isset($vars['fields']['nid']))
	{
		$vars['sm_share_buttons'] = theme('cmtls_sm_share', $GLOBALS['base_url'].'/'.cmtls_path_to_node($vars['fields']['nid']->raw));
	}
	
	static $pager;
	
	if ($hook != 'cmtls_pager' && $hook != 'cmtls_sm_share')
	{
		if($pager)
		{
			$vars['pager'] = $pager;
		}
		else 
		{
			$params = $_GET;
			unset($params['q']);
			
			if(!$params['page']) $params['page'] = 1;
			
			$pager_links = array();
			
			foreach ($params as $key => &$value)
			{
				$pager_links[] = check_plain($key).'='.check_plain($value);
			}
			
			$pager = $vars['pager'] = theme(
				'cmtls_pager',
				'?'.implode('&', $pager_links)
			);
		}
	}
	
	static $region;
	
	if($hook != 'page' && $hook != 'node' && $hook != 'cmtls_sm_share' && $hook != 'cmtls_pager' && $hook != 'block' && $hook != 'cmtls_content_header')
	{
		if(!$region)
		{
			$vars['cmtls_content_header'] = $region = theme('blocks', 'cmtls_content_header');
		}
		else 
		{
			$vars['cmtls_content_header'] = $region;
		}
	}
}

/*
=======
* inserts values from $arr2 after (or before) $key in $arr1
* if $key is not found, values from $arr2 are appended to the end of $arr1
*
* This function uses array_merge() so be aware that values from conflicting keys
* will overwrite each other
*
* @param $arr1
*   array to insert into
* @param $key
*   key of $arr1 to insert after (or before)
* @param $arr2
*   array whose values should be inserted
* @param $before
*   boolean. insert before the given key. defaults to inserting after
* @return
*   merged array
*/
function drupal_array_insert($arr1, $key, $arr2, $before = FALSE) {
  $index = array_search($key, array_keys($arr1));
  if($index === FALSE){
    $index = count($arr1); // insert @ end of array if $key not found
  }
  else {
    if(!$before){
      $index++;
    }
  }
  $end = array_splice($arr1, $index);
  return array_merge($arr1, $arr2, $end);
}

/*
// EXAMPLE //////////////////

$arr1 = array('one' => 1, 'two' => 2, 'three' => 3, 'four' => 4);
$arr2 = array('first' => 1, 'second' => 2, 'third' => 3, 'fourth' => 4);

$new_array = drupal_array_insert($arr1, 'three', $arr2);

print_r($new_array);
*/


function cmtls_page_title($node = NULL)
{
	if(!$node)
	{
		return FALSE;
	}
	
	return $node->title;
}


function cmtls_forms_alter($form, $form_state)
{
	$group = _cmtls_group_get_current();
	$app = _cmtls_app_get_current($group);

	$form['name'] = $form['author']['name'];
	$form['name']['#type'] = 'value';
	$form['date'] = $form['author']['date'];
	$form['date']['#type'] = 'value';

	$form['revision_information'] = NULL;
	$form['author'] = NULL;
	$form['options'] = NULL;
	$form['buttons']['preview'] = NULL;

	$form['geolocation'] = array(
		'#type' => 'fieldset',
		'#title' => t('Geolocation'),
		'#tree' => TRUE,
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	if ($form['#node'] && $form['#node']->field_cmtls_geoinfo[0]['openlayers_wkt'] && ($form['#node']->field_cmtls_geoinfo[0]['openlayers_wkt'] != 'GEOMETRYCOLLECTION()'))
	{
		$form['geolocation']['#collapsed'] = TRUE;
	}

	if($form['buttons']['delete'])
	{
		$node = $form['#node'];
		
		$links = module_invoke($app->field_cmtls_app_type[0]['value'], 'cmtls_app_links', $node);

		$form['buttons']['delete']['#type'] = 'markup';
		$form['buttons']['delete']['#value'] = l(t('Delete'), 'cmtls/'.$group->nid.'/'.$app->nid.'/'.$links[$app->field_cmtls_app_type[0]['value']]['delete'], array('attributes' => array('class' => 'modalframe-processed')));
	}

	$form['#after_build'][] = 'cmtls_forms_after_build';
	$form['#submit'][] = 'cmtls_forms_submit';
	
	return $form;
}

/**
 * general after build
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown
 */
function cmtls_forms_after_build($form, &$form_state)
{
	if(!$form['#node']->nid)
	{
		$app_info = module_invoke($form['#node']->type, 'cmtls_app');
		
		if($app_info)
		{
			$app_info = array_pop($app_info);
			
			drupal_set_title(t('New').' '.($app_info['node type title'] ? $app_info['node type title'] : 'post'));
		}
	}
	
	//printr($form); exit;

	$node = $form['#node'];

	$current_group = _cmtls_group_get_current();
	$current_app = _cmtls_app_get_current($current_group);

	// OG settings
	$form['og_groups'] = $form['og_nodeapi']['visible']['og_groups'];
	$form['og_groups']['#options'] = $form['og_groups']['#type']=='select' ? form_options_flatten($form['og_groups']['#options']) : $form['og_groups']['#options'];
	$form['og_groups']['#type'] = 'value';
	$form['og_groups']['#value'] = $form_state['values']['og_groups'] = isset($node->og_groups) && sizeof($node->og_groups) ? $node->og_groups : array($current_group->nid => $current_group->nid);

	$form['og_public'] = $form['og_nodeapi']['visible']['og_public'];
	$form['og_public']['#type'] = 'value';
	$form['og_public']['#value'] = $form_state['values']['og_public'] = isset($node->og_public) ? $node->og_public : ($current_group->og_private ? 0 : 1);

	// comment settings
	$form['comment'] = $form['comment_settings']['comment'];
	$form['comment']['#type'] = 'value';

	// nodehierarchy settings
	$form['parent'] = $form['hierarchy']['parent'];
	$form['parent']['#type'] = 'value';
	$form['parent']['#value'] = $form_state['values']['parent'] = $node->parent ? $node->parent : $current_app->nid;

	// NULL fields that user should not see
	$form['og_nodeapi'] = NULL;
	$form['hierarchy'] = NULL;
	$form['sections'] = NULL;
	$form['attachments'] = NULL;
	$form['comment_settings'] = NULL;
	$form['menu'] = NULL;
	$form['path'] = NULL;
	
	// geoinfo settings
	if($form['field_cmtls_geoinfo'] && $_GET['lat'] && $_GET['lon'] && !$form['field_cmtls_geoinfo']['#default_value'][0]['openlayers_wkt'])
	{
		$wkt = 'GEOMETRYCOLLECTION(POINT('.(float)$_GET['lon'].' '.(float)$_GET['lat'].'))';
		
		$form['field_cmtls_geoinfo']['#default_value'][0]['openlayers_wkt'] =
		$form['field_cmtls_geoinfo']['#value'][0]['openlayers_wkt'] =
		$form['field_cmtls_geoinfo']['openlayers_wkt']['#default_value'] =
		$form['field_cmtls_geoinfo']['openlayers_wkt']['#value'] =
		$wkt;
	}
	
	if($form['field_cmtls_geoinfo'])
	{
		$form['field_cmtls_geoinfo']['#prefix'] = '<div class="ol-map-input-widget">';
		$form['field_cmtls_geoinfo']['#suffix'] = '</div>';
		
		$form['geolocation']['field_cmtls_geoinfo'] = $form['field_cmtls_geoinfo'];
		unset($form['field_cmtls_geoinfo']);
	}
	else 
	{
		$form['geolocation'] = NULL;
	}
	
	if($form['taxonomy']['tags']) foreach ($form['taxonomy']['tags'] as $t_id => $taxonomy) if ($taxonomy['#title'])
	{
		$form['taxonomy']['tags'][$t_id]['#title'] = t('Tags');
	}


	return $form;
}

function cmtls_forms_submit($form, &$form_state)
{
	// Tell the parent window to close the modal frame dialog.
	modalframe_close_dialog(array(
		'refresh' => TRUE,
	));
}

function cmtls_views_pre_render(&$view)
{
	if($view->pager && $view->pager['items_per_page'] && $view->total_rows)
	{
		$total_pages = ceil($view->total_rows / $view->pager['items_per_page']);
		
		$vars = array(
			'cmtls' => array(
				'pager' => array(
					'totalPages' => $total_pages,
					'itemsPerPage' => $view->pager['items_per_page'],
					'currentPage' => $view->pager['current_page'],
					'totalItems' => $view->total_rows,
				),
			),
		);
		
		drupal_add_js($vars, 'setting');
	}
}

/**
 * Implementation of hook_action_info().
 */
function cmtls_action_info()
{
	return array(
		'cmtls_notify_action' => array(
			'description' => t('Send instant notifications on new nodes'),
			'type' => 'node',
			'configurable' => FALSE,
			'hooks' => array(
				'nodeapi' => array('insert', ),
			),
		),
		'cmtls_notify_comment_action' => array(
			'description' => t('Send instant notifications on new comments'),
			'type' => 'comment',
			'configurable' => FALSE,
			'hooks' => array(
				'comment' => array('insert', 'view', ),
			),
		),
	);
}

/**
 * Implementation of a Drupal action.
 */
function cmtls_notify_action($node, $context = array())
{
	if(!$node->og_groups) return;
	
	$group = reset($node->og_groups);
	
	if(!$group) return;
	
	$group = node_load($group);
	
	if(!$group && !$group->nid) return;
	
	$sql = "SELECT users.uid, users.name as username, users.mail, profile_values.value AS name, users.language, users.data FROM {users} AS users LEFT JOIN {og_uid} AS og_uid ON users.uid = og_uid.uid LEFT JOIN {profile_values} AS profile_values ON users.uid = profile_values.uid WHERE profile_values.fid = 2 AND og_uid.nid = %d AND users.uid != %d AND users.status = 1 AND users.data LIKE '%s' AND users.data LIKE '%s'";
	$result = db_query($sql, $group->nid, $node->uid, '%"group";i:1;%', '%i:'.$node->parent.';i:1;%');
	
	$users = array();
	
	$body = drupal_html_to_text($node->body).url(cmtls_path_to_node($node, $group), array('absolute' => TRUE));
	
	$site_name = variable_get('site_name', 'CT');
	
	$main_group = _cmtls_group_get_main();
	$profile_link = url('cmtls/'.$main_group->nid.'/member/', array('absolute' => TRUE));
	
	while ($user = db_fetch_object($result))
	{
		$user->data = unserialize($user->data);
    	$user_lang = user_preferred_language($user);
		
		if($user->data['cmtls']['notifications']['group'] && $user->data['cmtls']['notifications']['apps']['instant'][$node->parent])
		{
			$message = array(
				'subject' => t('!sitename has new post', array('!sitename' => $site_name), $user_lang->language),
				'body' =>
					t('Hello !user_name', array('!user_name' => $user->name), $user_lang->language).','."\n\n".
					t('!sitename has new post', array('!sitename' => $site_name), $user_lang->language).' "'.$node->title.'"'.':'."\n\n".
					$body.
					"\n"."\n".'---'."\n".
					$site_name.'. '.t('You can change your notification settings at !link', array('!link' => $profile_link.$user->uid), $user_lang->language)."\n"
				,
			);
			
			//printr($message);
			drupal_mail('cmtls', 'cmtls_mail', $user->mail, user_preferred_language($user), $message);
		}
	}
}

/**
 * Implementation of a Drupal action.
 */
function cmtls_notify_comment_action($comment, $context = array())
{
	global $user;
	
	/*
	printr($comment);
	printr($context);
	exit;
	*/
	
	if(!variable_get('cmtls_comment_notifications', '1')) return;
	
	$node = node_load($comment->nid);
	
	if($node->nid)
	{
    	$current_group = _cmtls_group_get_current();
    	
		$site_name = variable_get('site_name', 'CT');
		
		$node_link = url(cmtls_path_to_node($node, $current_group), array('absolute' => TRUE));
    	
		$main_group = _cmtls_group_get_main();
		$profile_link = url('cmtls/'.$main_group->nid.'/member/', array('absolute' => TRUE));
		
    	// notify node author
		if($user->uid != $node->uid)
		{
			$author = user_load($node->uid);
			$author_lang = user_preferred_language($author);
			
			if(!isset($author->cmtls['notifications']['group']) || $author->cmtls['notifications']['comments'])
			{
				profile_load_profile($author);
				
				$message = array(
					'subject' => $site_name.' - '._cmtls_member_name(array('name' => (object)array('raw' => $user->name), 'value' => (object)array('raw' => $user->profile_cmtls_member_name), 'uid' => (object)array('raw' => $user->uid))).' '.t('has commented on', NULL, $author_lang->language).': '.$node->title,
					'body' => t('User !username commented on "!nodetitle"',
						array(
							'!username' => _cmtls_member_name(array('name' => (object)array('raw' => $user->name), 'value' => (object)array('raw' => $user->profile_cmtls_member_name), 'uid' => (object)array('raw' => $user->uid))),
							'!nodetitle' => $node->title,
						),
						$author_lang->language
					).
					":\n\n".check_plain($comment->comment)."\n\n".$node_link.
					"\n\n".'---'."\n".
					$site_name.'. '.t('You can change your notification settings at !link', array('!link' => $profile_link.$author->uid), $author_lang->language)."\n",
				);
				
				drupal_mail('cmtls', 'cmtls_mail', $author->mail, user_preferred_language($author), $message);
			}
		}
		
		// notify other commenters and node author
		// todo: select query users to avoid user_load()
		$result = db_query('SELECT DISTINCT uid FROM {comments} WHERE nid = %d AND uid NOT IN (0, %d, %d)', $node->nid, $user->uid, $node->uid);
		while ($commenter_uid = db_fetch_array($result))
		{
			$commenter = user_load($commenter_uid);
			$commenter_lang = user_preferred_language($commenter);
	    	
			if(!isset($commenter->cmtls['notifications']['group']) || $commenter->cmtls['notifications']['comments'])
			{
				profile_load_profile($commenter);
		    	
				$message = array(
					'subject' => $site_name.' - '._cmtls_member_name(array('name' => (object)array('raw' => $user->name), 'value' => (object)array('raw' => $user->profile_cmtls_member_name), 'uid' => (object)array('raw' => $user->uid))).' '.t('has commented on', NULL, $commenter_lang->language).': '.$node->title,
					'body' => t('User !username commented on "!nodetitle"',
						array(
							'!username' => _cmtls_member_name(array('name' => (object)array('raw' => $user->name), 'value' => (object)array('raw' => $user->profile_cmtls_member_name), 'uid' => (object)array('raw' => $user->uid))),
							'!nodetitle' => $node->title,
						),
						$commenter_lang->language
					).
					":\n\n".check_plain($comment->comment)."\n\n".$node_link.
					"\n\n".'---'."\n".
					$site_name.'. '.t('You can change your notification settings at !link', array('!link' => $profile_link.$commenter->uid), $commenter_lang->language)."\n",
				);
				
				drupal_mail('cmtls', 'cmtls_mail', $commenter->mail, $commenter_lang, $message);
			}
	    }
	}
}

function cmtls_format_date_ago($timestamp)
{
	$time_diff = time() - $timestamp;
	return t(($time_diff < 0 ? '%time hence' : '%time ago'), array('%time' => format_interval(abs($time_diff), 1)));
}

/*
$result = db_query('SELECT * FROM ckeditor_settings');
while($row = db_fetch_array($result))
{
	var_export(unserialize($row['settings']));
}
exit;
*/